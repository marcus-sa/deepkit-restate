<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="{&quot;currentConversationId&quot;:&quot;175b6dc7-0da1-433e-83eb-63961a202993&quot;,&quot;conversations&quot;:{&quot;175b6dc7-0da1-433e-83eb-63961a202993&quot;:{&quot;id&quot;:&quot;175b6dc7-0da1-433e-83eb-63961a202993&quot;,&quot;createdAtIso&quot;:&quot;2025-08-10T06:32:35.569Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-08-10T06:58:17.129Z&quot;,&quot;chatHistory&quot;:[{&quot;request_id&quot;:&quot;1bacac0b-d1ac-48ca-9e78-9b82f3fe2262&quot;,&quot;uuid&quot;:&quot;1cb37f1d-0661-4841-a8df-6914e69eaa88&quot;,&quot;chatItemType&quot;:&quot;agentic-checkpoint-delimiter&quot;,&quot;status&quot;:&quot;success&quot;,&quot;fromTimestamp&quot;:0,&quot;toTimestamp&quot;:1754808796951,&quot;seen_state&quot;:&quot;seen&quot;},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;83d314c2-b470-4221-86f0-c98ae87eec1a&quot;,&quot;request_message&quot;:&quot;is there a better name for this? usage can be found in context.ts&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;is there a better name for this? usage can be found in context.ts&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01Njj3mF6sMj3koJasYC84qT&quot;,&quot;tool_name&quot;:&quot;codebase-retrieval&quot;,&quot;input_json&quot;:&quot;{\&quot;information_request\&quot;: \&quot;Find usage of forwardRequestHeaders property in context.ts and any other files. Show how this property is used, what it controls, and what request headers are being forwarded where.\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:2,&quot;type&quot;:0,&quot;content&quot;:&quot;I'll help you find a better name for this property by examining its usage in the codebase.\n&quot;},{&quot;id&quot;:3,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:4,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;is there a better name for this? usage can be found in context.ts&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;,&quot;folderRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-08-10T06:53:47.580Z&quot;,&quot;response_text&quot;:&quot;I'll help you find a better name for this property by examining its usage in the codebase.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;3bbef71e-ab77-4a4a-abcf-ecb66fdb8d10&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;Based on the code analysis, I can see that `forwardRequestHeaders` is used to control whether incoming request headers should be forwarded when making service-to-service calls within Restate. Looking at the usage in `context.ts` (lines 85-90 and 109-114), this property determines whether the current request's headers are merged with any explicitly provided headers when calling other services.\n\nHere are some better name suggestions:\n\n1. **`propagateIncomingHeaders`** - More descriptive about what's happening (propagating headers from incoming requests)\n2. **`inheritRequestHeaders`** - Suggests that outgoing calls inherit headers from the current request\n3. **`passRequestHeaders`** - Simple and clear about passing headers along\n4. **`cascadeRequestHeaders`** - Implies headers flow down through the call chain\n5. **`relayRequestHeaders`** - Suggests headers are relayed/forwarded to downstream services\n\nI'd recommend **`propagateIncomingHeaders`** as it's the most descriptive and clearly indicates that headers from incoming requests are propagated to outgoing service calls. This makes the intent clearer than the current `forwardRequestHeaders`.\n\nThe current name could be ambiguous about which direction the forwarding happens, while `propagateIncomingHeaders` makes it clear that it's about taking headers from the current incoming request and including them in outgoing calls to other services.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;The following code sections were retrieved:\nPath: src/context.ts\n     1\timport * as restate from '@restatedev/restate-sdk';\n     2\timport { ReceiveType } from '@deepkit/type';\n     3\timport { CUSTOM_TERMINAL_ERROR_CODE, RestateConfig } from './config.js';\n     4\timport { decodeRestateServiceMethodResponse } from './utils.js';\n     5\timport {\n     6\t  createBSONSerde,\n     7\t  deserializeBSONAndThrowCustomTerminalError,\n     8\t} from './serde.js';\n     9\timport {\n    10\t  RestateAwakeable,\n    11\t  RestateInvocationHandle,\n    12\t  RestateObjectContext,\n    13\t  RestateRunAction,\n    14\t  RestateSagaContext,\n    15\t  RestateServiceContext,\n    16\t  RestateSharedObjectContext,\n    17\t} from './types.js';\n    18\timport {\n    19\t  InvocationId,\n    20\t  RestatePromise,\n    21\t  RunOptions,\n    22\t} from '@restatedev/restate-sdk';\n    23\t\n    24\texport function createServiceContext(\n    25\t  ctx: restate.Context,\n    26\t  config?: RestateConfig,\n    27\t): RestateServiceContext {\n    28\t  return {\n    29\t    workflowClient: ctx.workflowClient.bind(ctx),\n    30\t    workflowSendClient: ctx.workflowSendClient.bind(ctx),\n    31\t    serviceClient: ctx.serviceClient.bind(ctx),\n    32\t    objectClient: ctx.objectClient.bind(ctx),\n    33\t    objectSendClient: ctx.objectSendClient.bind(ctx),\n    34\t    serviceSendClient: ctx.serviceSendClient.bind(ctx),\n    35\t    rand: ctx.rand,\n    36\t    date: ctx.date,\n    37\t    console: ctx.console,\n    38\t    request: ctx.request.bind(ctx),\n    39\t    sleep: ctx.sleep.bind(ctx),\n    40\t    rejectAwakeable: ctx.rejectAwakeable.bind(ctx),\n    41\t    genericCall: ctx.genericCall.bind(ctx),\n    42\t    genericSend: ctx.genericSend.bind(ctx),\n    43\t    cancel: ctx.cancel.bind(ctx),\n    44\t    attach&lt;T&gt;(\n    45\t      invocationId: InvocationId,\n    46\t      type?: ReceiveType&lt;T&gt;,\n    47\t    ): RestatePromise&lt;T&gt; {\n    48\t      const serde = createBSONSerde(type);\n    49\t      return ctx.attach(invocationId, serde);\n    50\t    },\n    51\t    resolveAwakeable&lt;T&gt;(id: string, payload?: T, type?: ReceiveType&lt;T&gt;) {\n    52\t      const serde = createBSONSerde(type);\n    53\t      ctx.resolveAwakeable(id, payload, serde);\n    54\t    },\n    55\t    awakeable&lt;T&gt;(type?: ReceiveType&lt;T&gt;): RestateAwakeable&lt;T&gt; {\n    56\t      const serde = createBSONSerde&lt;T&gt;(type);\n    57\t      return ctx.awakeable&lt;T&gt;(serde) as RestateAwakeable&lt;T&gt;;\n    58\t    },\n    59\t    run&lt;T = void&gt;(\n    60\t      name: string,\n    61\t      action: RestateRunAction&lt;T&gt;,\n    62\t      options: RunOptions&lt;unknown&gt; = {},\n    63\t      type?: ReceiveType&lt;T&gt;,\n    64\t    ): RestatePromise&lt;T&gt; {\n    65\t      if (type) {\n    66\t        const serde = createBSONSerde&lt;T&gt;(type);\n    67\t        return ctx.run(name, action, {\n    68\t          serde,\n    69\t          ...options,\n    70\t        }) as RestatePromise&lt;T&gt;;\n    71\t      }\n    72\t\n    73\t      return ctx.run(\n    74\t        name,\n    75\t        async () =&gt; {\n    76\t          await action();\n    77\t        },\n    78\t        options,\n    79\t      ) as RestatePromise&lt;never&gt;;\n    80\t    },\n    81\t    send(...args: readonly any[]): Promise&lt;RestateInvocationHandle&gt; {\n    82\t      const [key, { service, method, data }, options] =\n    83\t        typeof args[0] !== 'string' ? [undefined, ...args] : args;\n    84\t\n    85\t      const headers = config?.server?.forwardRequestHeaders\n    86\t        ? {\n    87\t            ...ctx.request().headers,\n    88\t            ...options?.headers,\n    89\t          }\n    90\t        : options?.headers;\n    91\t\n    92\t      const { invocationId } = ctx.genericSend({\n    93\t        service,\n    94\t        method,\n    95\t        parameter: data,\n    96\t        delay: options?.delay,\n    97\t        headers,\n    98\t        key,\n    99\t      });\n   100\t\n   101\t      return invocationId.then(invocationId =&gt; ({\n   102\t        invocationId,\n   103\t      }));\n   104\t    },\n   105\t    call&lt;T&gt;(...args: readonly any[]): RestatePromise&lt;T&gt; {\n   106\t      const [key, { service, method, data, deserializeReturn }, options] =\n   107\t        typeof args[0] !== 'string' ? [undefined, ...args] : args;\n   108\t\n   109\t      const headers = config?.server?.forwardRequestHeaders\n   110\t        ? {\n   111\t            ...ctx.request().headers,\n   112\t            ...options?.headers,\n   113\t          }\n   114\t        : options?.headers;\n   115\t\n   116\t      return ctx\n   117\t        .genericCall({\n   118\t          service,\n   119\t          method,\n   120\t          parameter: data,\n   121\t          headers,\n   122\t          key,\n   123\t          outputSerde: restate.serde.binary,\n   124\t        })\n   125\t        .map((value, failure) =&gt; {\n   126\t          if (value) {\n   127\t            return decodeRestateServiceMethodResponse(value, deserializeReturn);\n   128\t          }\n   129\t\n   130\t          if (\n   131\t            failure instanceof restate.TerminalError &amp;&amp;\n   132\t            failure.code === CUSTOM_TERMINAL_ERROR_CODE\n   133\t          ) {\n   134\t            deserializeBSONAndThrowCustomTerminalError(failure.message);\n   135\t          }\n   136\t\n   137\t          throw failure;\n   138\t        });\n   139\t    },\n   140\t  };\n   141\t}\n   142\t\n   143\texport function createSharedObjectContext(\n   144\t  ctx: restate.ObjectSharedContext,\n   145\t  config?: RestateConfig,\n   146\t): RestateSharedObjectContext {\n   147\t  return Object.assign(createServiceContext(ctx, config), {\n   148\t    key: ctx.key,\n   149\t    stateKeys: ctx.stateKeys.bind(ctx),\n   150\t    async get&lt;T&gt;(name: string, type?: ReceiveType&lt;T&gt;): Promise&lt;T | null&gt; {\n   151\t      const serde = createBSONSerde&lt;T&gt;(type);\n   152\t      return await ctx.get&lt;T&gt;(name, serde);\n   153\t    },\n   154\t  });\n   155\t}\n   156\t\n   157\texport function createObjectContext(\n   158\t  ctx: restate.ObjectContext,\n   159\t  config?: RestateConfig,\n   160\t): RestateObjectContext {\n   161\t  return Object.assign(createSharedObjectContext(ctx, config), {\n   162\t    clearAll: ctx.clearAll.bind(ctx),\n   163\t    clear: ctx.clear.bind(ctx),\n   164\t    set&lt;T&gt;(name: string, value: T, type?: ReceiveType&lt;T&gt;) {\n   165\t      const serde = createBSONSerde&lt;T&gt;(type);\n   166\t      ctx.set(name, value, serde);\n   167\t    },\n   168\t  });\n   169\t}\n   170\t\n   171\texport function createSagaContext(\n   172\t  ctx: restate.WorkflowContext | restate.WorkflowSharedContext,\n   173\t  config?: RestateConfig,\n   174\t): RestateSagaContext {\n   175\t  return Object.assign(createObjectContext(ctx as any, config), {\n   176\t    send: undefined,\n   177\t    call: undefined,\n   178\t  });\n   179\t}\n...\nPath: src/config.ts\n     1\timport { RestateIngressClientOptions } from './restate-ingress-client.js';\n     2\timport { RestateAdminClientOptions } from './restate-admin-client.js';\n     3\timport { RestatePubSubConfig } from './event/config.js';\n     4\t\n     5\t// indicates that it is a custom error that has to be deserialized\n     6\texport const CUSTOM_TERMINAL_ERROR_CODE = 1001;\n     7\t\n     8\texport class RestateKafkaConfig {\n     9\t  readonly clusterName: string;\n    10\t}\n    11\t\n    12\texport class RestateServerConfig {\n    13\t  readonly host?: string;\n    14\t  readonly port?: number = 9080;\n    15\t  // TODO: should be a function so that headers can be chosen at runtime\n    16\t  readonly forwardRequestHeaders?: true;\n    17\t}\n    18\t\n    19\texport class RestateConfig {\n    20\t  readonly server?: RestateServerConfig;\n    21\t  readonly ingress?: RestateIngressClientOptions;\n    22\t  readonly pubsub?: RestatePubSubConfig;\n    23\t  readonly admin?: RestateAdminClientOptions;\n    24\t  readonly kafka?: RestateKafkaConfig;\n    25\t}\n...\nPath: README.md\n...\n    95\t\n    96\t```ts\n    97\timport { RestateIngressClient } from 'deepkit-restate';\n    98\t\n    99\tconst client = new RestateIngressClient({ url: 'http://localhost:9080' });\n   100\t```\n   101\t\n   102\tOr retrieve the configured instance via DI:\n   103\t\n   104\t```ts\n   105\tconst client = app.get&lt;RestateClient&gt;();\n   106\t```\n   107\t\n   108\t### Using the Client\n   109\t\n   110\tTo create a proxy to a **service**:\n   111\t\n   112\t```ts\n   113\tconst user = client.service&lt;UserServiceApi&gt;();\n   114\t```\n   115\t\n   116\tTo create a proxy to an **object**:\n   117\t\n   118\t```ts\n   119\tconst user = client.object&lt;UserObjectApi&gt;();\n   120\t```\n   121\t\n   122\t### Invoking Methods\n   123\t\n   124\tDurable request (waits for a result):\n   125\t\n   126\t```ts\n   127\tawait client.call(user.create());\n   128\t```\n   129\t\n   130\tFire-and-forget (does not wait for result):\n   131\t\n   132\t```ts\n   133\tawait client.send(user.create());\n   134\t```\n   135\t\n   136\tYou can configure delivery options:\n   137\t\n   138\t```ts\n   139\tawait client.send(user.create(), { delay: '10s' });\n   140\t```\n...\n   410\t\n   411\t## Awakeables\n   412\t\n   413\tAwakeables are special constructs to **wait for asynchronous external events**. They provide a promise you can `await` to pause saga execution until an event occurs.\n   414\t\n   415\tCreate awakeables with the saga context inside your saga methods:\n   416\t\n   417\t```ts\n   418\tthis.confirmTicketAwakeable = this.ctx.awakeable&lt;TicketConfirmed&gt;();\n   419\t```\n   420\t\n   421\t---\n   422\t\n   423\t## Using the Saga Context\n   424\t\n   425\tThe `RestateSagaContext` (`this.ctx`) provides utilities like:\n   426\t\n   427\t- `awakeable&lt;T&gt;()`: Creates an awakeable to wait for events.\n   428\t- `set&lt;T&gt;(key, value)`: Persist state data during saga execution.\n   429\t- `get&lt;T&gt;(key)`: Retrieve persisted state.\n   430\t\n   431\t---\n   432\t\n   433\t## Calling Other Services\n   434\t\n   435\tAll service calls inside invocation handlers automatically use the underlying `client.call`. This means:\n...\nPath: src/restate-ingress-client.ts\n...\n   130\t\n   131\t  call&lt;R, A extends any[]&gt;(\n   132\t    key: string,\n   133\t    request: RestateObjectHandlerRequest&lt;R, A&gt;,\n   134\t    options?: RestateCallOptions,\n   135\t  ): Promise&lt;R&gt;;\n   136\t  call&lt;R, A extends any[]&gt;(\n   137\t    request: RestateServiceHandlerRequest&lt;R, A&gt;,\n   138\t    options?: RestateCallOptions,\n   139\t  ): Promise&lt;R&gt;;\n   140\t  async call&lt;R&gt;(...args: readonly any[]): Promise&lt;R&gt; {\n   141\t    const [key, { service, method, data, deserializeReturn }, options] =\n   142\t      typeof args[0] !== 'string' ? [undefined, ...args] : args;\n   143\t\n   144\t    const url = new URL(\n   145\t      key\n   146\t        ? `${this.opts.url}/${service}/${key}/${method}`\n   147\t        : `${this.opts.url}/${service}/${method}`,\n   148\t    );\n   149\t\n   150\t    const headers = new Headers([\n   151\t      ['content-type', 'application/octet-stream'],\n   152\t      ['accept', 'application/octet-stream'],\n   153\t    ]);\n   154\t    if (options?.idempotencyKey) {\n   155\t      headers.set('idempotency-key', options.idempotencyKey);\n   156\t    }\n...\nPath: src/types.ts\n     1\timport { ReceiveType, typeOf } from '@deepkit/type';\n     2\timport { BSONDeserializer } from '@deepkit/bson';\n     3\timport {\n     4\t  Context,\n     5\t  InvocationId,\n     6\t  type ObjectContext,\n     7\t  ObjectSharedContext,\n     8\t  RestatePromise,\n     9\t  RunOptions,\n    10\t  TerminalError,\n    11\t  WorkflowContext,\n    12\t} from '@restatedev/restate-sdk';\n    13\t\n    14\texport interface RestateInvocationHandle {\n    15\t  invocationId: string;\n    16\t}\n    17\t\n    18\texport type RestateRunAction&lt;T&gt; = () =&gt; Promise&lt;T&gt; | T;\n    19\t\n    20\texport interface RestateSendOptions extends RestateCallOptions {\n    21\t  readonly delay?: number;\n    22\t}\n    23\t\n    24\texport interface RestateCallOptions {\n    25\t  readonly headers?: Record&lt;string, string&gt;;\n    26\t  readonly idempotencyKey?: string;\n    27\t}\n...\n   113\t\n   114\texport interface RestateBaseContext extends RestateClient {\n   115\t  awakeable&lt;T&gt;(type?: ReceiveType&lt;T&gt;): RestateAwakeable&lt;T&gt;;\n   116\t  resolveAwakeable&lt;T&gt;(\n   117\t    id: string,\n   118\t    payload: NoInfer&lt;T&gt;,\n   119\t    type?: ReceiveType&lt;T&gt;,\n   120\t  ): void;\n   121\t  rejectAwakeable(id: string, reason: string): void;\n   122\t  attach&lt;T&gt;(\n   123\t    invocationId: InvocationId,\n   124\t    type?: ReceiveType&lt;T&gt;,\n   125\t  ): RestatePromise&lt;T&gt;;\n   126\t  // run should only return a value if a generic is provided\n   127\t  run(\n   128\t    name: string,\n   129\t    action: RestateRunAction&lt;unknown&gt;,\n   130\t    options?: Omit&lt;RunOptions&lt;unknown&gt;, 'serde'&gt;,\n   131\t  ): RestatePromise&lt;void&gt;;\n   132\t  run&lt;T&gt;(\n   133\t    name: string,\n   134\t    action: RestateRunAction&lt;T&gt;,\n   135\t    options?: Omit&lt;RunOptions&lt;unknown&gt;, 'serde'&gt;,\n   136\t    type?: ReceiveType&lt;T&gt;,\n   137\t  ): RestatePromise&lt;T&gt;;\n   138\t}\n...\nPath: src/restate-server.ts\n     1\timport { eventDispatcher } from '@deepkit/event';\n     2\timport {\n     3\t  onServerMainBootstrap,\n     4\t  onServerMainShutdown,\n     5\t} from '@deepkit/framework';\n     6\timport { InjectorContext } from '@deepkit/injector';\n     7\timport * as restate from '@restatedev/restate-sdk';\n     8\timport { entity, ReflectionKind } from '@deepkit/type';\n     9\timport { createServer } from 'node:http2';\n...\n    25\t  restateSagaContextType,\n    26\t  restateServiceContextType,\n    27\t  SCOPE,\n    28\t  restateClientType,\n    29\t  restateBaseContextType,\n    30\t} from './types.js';\n    31\timport { RestateIngressClient } from './restate-ingress-client.js';\n    32\timport { RestatePubSubConfig } from './event/config.js';\n    33\timport { serializeBSON } from '@deepkit/bson';\n    34\timport {\n    35\t  createObjectContext,\n    36\t  createSagaContext,\n    37\t  createServiceContext,\n    38\t  createSharedObjectContext,\n    39\t} from './context.js';\n    40\t\n    41\tconst DEFAULT_HANDLER_OPTS = {\n    42\t  input: restate.serde.binary,\n    43\t  output: restate.serde.binary,\n    44\t} as const;\n...\n    64\t\n    65\t  @eventDispatcher.listen(onServerMainBootstrap)\n    66\t  async bootstrap() {\n    67\t    const config = this.config.server!;\n    68\t\n    69\t    for (const object of this.objects) {\n    70\t      const handlers = this.createObjectHandlers(object);\n    71\t      this.endpoint.bind(\n    72\t        restate.object({ name: object.metadata.name, handlers }),\n    73\t      );\n    74\t    }\n    75\t\n    76\t    for (const service of this.services) {\n    77\t      const handlers = this.createServiceHandlers(service);\n    78\t      this.endpoint.bind(\n    79\t        restate.service({ name: service.metadata.name, handlers }),\n    80\t      );\n    81\t    }\n    82\t\n    83\t    for (const saga of this.sagas) {\n    84\t      const handlers = this.createSagaHandlers(saga);\n    85\t      this.endpoint.bind(\n    86\t        restate.workflow({ name: saga.metadata.name, handlers }),\n    87\t      );\n    88\t    }\n    89\t\n    90\t    await new Promise&lt;void&gt;(resolve =&gt; {\n    91\t      this.http2Server = createServer(this.endpoint.http2Handler());\n    92\t      this.http2Server.listen(this.config.server?.port!, resolve);\n    93\t    });\n    94\t\n    95\t    if (this.config.admin?.deployOnStartup) {\n    96\t      const admin = this.injectorContext.get(RestateAdminClient);\n    97\t      if (!config.host) {\n    98\t        throw new Error('Restate server host is missing');\n    99\t      }\n   100\t      await admin.deployments.create(`${config.host}:${config.port}`);\n   101\t    }\n   102\t\n   103\t    if (this.config.kafka) {\n   104\t      if (!this.config.admin) {\n   105\t        throw new Error('Restate admin config is missing for Kafka');\n   106\t      }\n   107\t      // TODO: filter out handlers by existing subscriptions\n   108\t      await Promise.all([\n   109\t        this.addKafkaHandlerSubscriptions('object', [...this.objects]),\n   110\t        this.addKafkaHandlerSubscriptions('service', [...this.services]),\n   111\t      ]);\n   112\t    }\n...\n   200\t\n   201\t  private createSagaHandlers({ module, classType, metadata }: InjectorSaga) {\n   202\t    return {\n   203\t      run: restate.handlers.workflow.workflow(\n   204\t        DEFAULT_HANDLER_OPTS,\n   205\t        async (rsCtx: restate.WorkflowContext, request: Uint8Array) =&gt; {\n   206\t          const injector = this.createScopedInjector();\n   207\t          const ctx = createSagaContext(rsCtx, this.config);\n   208\t          injector.set(restateClientType, ctx);\n   209\t          injector.set(restateBaseContextType, ctx);\n   210\t          injector.set(restateSagaContextType, ctx);\n   211\t          const restateSaga = injector.get(classType, module);\n   212\t          const sagaManager = new SagaManager(ctx, restateSaga, metadata);\n   213\t          const data = metadata.deserializeData(request);\n   214\t          await sagaManager.start(data);\n   215\t          await sagaManager.waitForCompletion();\n   216\t          return new Uint8Array();\n   217\t        },\n   218\t      ),\n   219\t      state: restate.handlers.workflow.shared(\n   220\t        DEFAULT_HANDLER_OPTS,\n   221\t        async (ctx: restate.WorkflowSharedContext) =&gt; {\n   222\t          const data = await ctx.get&lt;Uint8Array&gt;(\n   223\t            SAGA_STATE_KEY,\n   224\t            restate.serde.binary,\n   225\t          );\n   226\t          if (!data) {\n   227\t            throw new Error('Missing saga state');\n   228\t          }\n   229\t          return data;\n   230\t        },\n   231\t      ),\n   232\t    };\n   233\t  }\n...\n   260\t            return await this.callHandler(instance, handler, data);\n   261\t          },\n   262\t        ),\n   263\t      }),\n   264\t      {},\n   265\t    );\n   266\t  }\n   267\t\n   268\t  private async callHandler(\n   269\t    instance: any,\n   270\t    handler: RestateHandlerMetadata,\n   271\t    data: Uint8Array,\n   272\t  ): Promise&lt;Uint8Array&gt; {\n   273\t    try {\n   274\t      const args = handler.deserializeArgs(data);\n   275\t      const result = await instance[handler.name].bind(instance)(...args);\n   276\t      return serializeRestateHandlerResponse({\n   277\t        success: true,\n   278\t        data:\n   279\t          handler.returnType.kind !== ReflectionKind.void &amp;&amp;\n   280\t          handler.returnType.kind !== ReflectionKind.undefined\n   281\t            ? handler.serializeReturn(result)\n   282\t            : new Uint8Array(),\n   283\t        // TODO: use entity name\n   284\t        typeName: handler.returnType.typeName,\n   285\t      });\n...\nPath: src/event/server/config.ts\n     1\texport class RestateSseConfig {\n     2\t  readonly all?: boolean = true;\n     3\t  readonly autoDiscover?: boolean = false;\n     4\t  readonly nodes?: string[];\n     5\t}\n     6\t\n     7\texport class RestatePubSubServerConfig {\n     8\t  readonly sse: RestateSseConfig = new RestateSseConfig();\n     9\t}\n...\nPath: src/event/config.ts\n     1\texport class RestateSseConfig {\n     2\t  readonly url: string;\n     3\t}\n     4\t\n     5\texport class RestatePubSubConfig {\n     6\t  readonly defaultStream?: string = 'all';\n     7\t  readonly cluster?: string = 'default';\n     8\t  readonly sse?: RestateSseConfig;\n     9\t}\n...\nPath: src/restate.module.ts\n...\n    39\t\n    40\t  override process() {\n    41\t    if (this.config.ingress) {\n    42\t      this.addProvider(RestateIngressClient);\n    43\t    } else {\n    44\t      this.addProvider({\n    45\t        provide: RestateIngressClient,\n    46\t        useFactory() {\n    47\t          throw new Error('Restate ingress config is missing');\n    48\t        },\n    49\t      });\n    50\t    }\n    51\t    this.addProvider({\n    52\t      provide: restateClientType,\n    53\t      useExisting: RestateIngressClient,\n    54\t    });\n    55\t\n    56\t    if (this.config.pubsub) {\n    57\t      this.addImport(new RestateEventModule(this.config.pubsub));\n    58\t    }\n    59\t\n    60\t    if (this.config.admin) {\n    61\t      this.addProvider(RestateAdminClient);\n    62\t    }\n...\nPath: src/event/module.ts\n     1\timport { createModuleClass } from '@deepkit/app';\n     2\t\n     3\timport {\n     4\t  provideRestateObjectProxy,\n     5\t  provideRestateServiceProxy,\n     6\t} from '../utils.js';\n     7\timport { EventProcessorApi, EventStoreApi } from './types.js';\n     8\timport { RestateEventSubscriber } from './subscriber.js';\n     9\timport { RestateEventPublisher } from './publisher.js';\n    10\timport { RestatePubSubConfig } from './config.js';\n    11\t\n    12\texport class RestateEventModule extends createModuleClass({\n    13\t  config: RestatePubSubConfig,\n    14\t  providers: [\n    15\t    provideRes...&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01Njj3mF6sMj3koJasYC84qT&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;,&quot;folderRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-08-10T06:53:58.235Z&quot;,&quot;response_text&quot;:&quot;Based on the code analysis, I can see that `forwardRequestHeaders` is used to control whether incoming request headers should be forwarded when making service-to-service calls within Restate. Looking at the usage in `context.ts` (lines 85-90 and 109-114), this property determines whether the current request's headers are merged with any explicitly provided headers when calling other services.\n\nHere are some better name suggestions:\n\n1. **`propagateIncomingHeaders`** - More descriptive about what's happening (propagating headers from incoming requests)\n2. **`inheritRequestHeaders`** - Suggests that outgoing calls inherit headers from the current request\n3. **`passRequestHeaders`** - Simple and clear about passing headers along\n4. **`cascadeRequestHeaders`** - Implies headers flow down through the call chain\n5. **`relayRequestHeaders`** - Suggests headers are relayed/forwarded to downstream services\n\nI'd recommend **`propagateIncomingHeaders`** as it's the most descriptive and clearly indicates that headers from incoming requests are propagated to outgoing service calls. This makes the intent clearer than the current `forwardRequestHeaders`.\n\nThe current name could be ambiguous about which direction the forwarding happens, while `propagateIncomingHeaders` makes it clear that it's about taking headers from the current incoming request and including them in outgoing calls to other services.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;e0456c01-eb5b-4955-8acf-6f6dbb84873e&quot;,&quot;request_message&quot;:&quot;update docss to reflect the new option&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;update docss to reflect the new option&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01S4WJk32EVRjeUEkXtRVLR5&quot;,&quot;tool_name&quot;:&quot;codebase-retrieval&quot;,&quot;input_json&quot;:&quot;{\&quot;information_request\&quot;: \&quot;Find documentation about forwardRequestHeaders or server configuration options in README.md, docs files, or any other documentation files. Show configuration examples and explanations.\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:2,&quot;type&quot;:0,&quot;content&quot;:&quot;I'll help you update the documentation to reflect the new `propagateIncomingHeaders` option. Let me first search for existing documentation about this configuration option.\n&quot;},{&quot;id&quot;:3,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:4,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;update docss to reflect the new option&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;,&quot;folderRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-08-10T06:57:10.898Z&quot;,&quot;response_text&quot;:&quot;I'll help you update the documentation to reflect the new `propagateIncomingHeaders` option. Let me first search for existing documentation about this configuration option.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;request_id&quot;:&quot;aa24a53d-56ab-4ddd-827c-f489096251b7&quot;,&quot;status&quot;:&quot;cancelled&quot;,&quot;chatItemType&quot;:&quot;agentic-turn-delimiter&quot;},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;d7d16e00-6dfc-4041-8e7f-1a8022776274&quot;,&quot;request_message&quot;:&quot;update docs in readme.md to reflect the new option as well as in config.ts&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;update docs in readme.md to reflect the new option as well as in config.ts&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_017fdT3XhCtYVSRTNB1u8phz&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;src/config.ts\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:2,&quot;type&quot;:0,&quot;content&quot;:&quot;I'll help you update the documentation to reflect the new `propagateIncomingHeaders` option. Let me first examine the current documentation and configuration.\n&quot;},{&quot;id&quot;:3,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:4,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;update docs in readme.md to reflect the new option as well as in config.ts&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;,&quot;folderRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-08-10T06:57:31.491Z&quot;,&quot;response_text&quot;:&quot;I'll help you update the documentation to reflect the new `propagateIncomingHeaders` option. Let me first examine the current documentation and configuration.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;322ea7a8-1e07-41be-bfdb-b0858902ba52&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01WLZRdaqm895i6ejFrzTNBY&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;README.md\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:2,&quot;type&quot;:0,&quot;content&quot;:&quot;Now let me check the README.md to see the current documentation structure:\n&quot;},{&quot;id&quot;:3,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:4,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on src/config.ts:\n     1\timport { RestateIngressClientOptions } from './restate-ingress-client.js';\n     2\timport { RestateAdminClientOptions } from './restate-admin-client.js';\n     3\timport { RestatePubSubConfig } from './event/config.js';\n     4\t\n     5\t// indicates that it is a custom error that has to be deserialized\n     6\texport const CUSTOM_TERMINAL_ERROR_CODE = 1001;\n     7\t\n     8\texport class RestateKafkaConfig {\n     9\t  readonly clusterName: string;\n    10\t}\n    11\t\n    12\texport class RestateServerConfig {\n    13\t  readonly host?: string;\n    14\t  readonly port?: number = 9080;\n    15\t  readonly propagateIncomingHeaders?: true | readonly string[];\n    16\t}\n    17\t\n    18\texport class RestateConfig {\n    19\t  readonly server?: RestateServerConfig;\n    20\t  readonly ingress?: RestateIngressClientOptions;\n    21\t  readonly pubsub?: RestatePubSubConfig;\n    22\t  readonly admin?: RestateAdminClientOptions;\n    23\t  readonly kafka?: RestateKafkaConfig;\n    24\t}\n    25\t\nTotal lines in file: 25\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_017fdT3XhCtYVSRTNB1u8phz&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;,&quot;folderRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-08-10T06:57:35.080Z&quot;,&quot;response_text&quot;:&quot;Now let me check the README.md to see the current documentation structure:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;05375188-a33b-404e-b1bb-8148719462e5&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01KRf71VhD3MppGMW9aNsMPR&quot;,&quot;tool_name&quot;:&quot;str-replace-editor&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;str_replace\&quot;, \&quot;path\&quot;: \&quot;src/config.ts\&quot;, \&quot;instruction_reminder\&quot;: \&quot;ALWAYS BREAK DOWN EDITS INTO SMALLER CHUNKS OF AT MOST 150 LINES EACH.\&quot;, \&quot;old_str_1\&quot;: \&quot;export class RestateServerConfig {\\n  readonly host?: string;\\n  readonly port?: number = 9080;\\n  readonly propagateIncomingHeaders?: true | readonly string[];\\n}\&quot;, \&quot;new_str_1\&quot;: \&quot;export class RestateServerConfig {\\n  readonly host?: string;\\n  readonly port?: number = 9080;\\n  /**\\n   * Controls whether incoming request headers are propagated to outgoing service calls.\\n   * - `true`: All incoming headers are forwarded to downstream service calls\\n   * - `string[]`: Only the specified header names are forwarded\\n   * - `undefined`: No headers are propagated (default)\\n   * \\n   * This is useful for passing authentication tokens, correlation IDs, or other\\n   * context information through the service call chain.\\n   */\\n  readonly propagateIncomingHeaders?: true | readonly string[];\\n}\&quot;, \&quot;old_str_start_line_number_1\&quot;: 12, \&quot;old_str_end_line_number_1\&quot;: 16}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:2,&quot;type&quot;:0,&quot;content&quot;:&quot;Now let me add documentation for the `propagateIncomingHeaders` option. I'll update both the config.ts file with a comment and the README.md with proper documentation.\n&quot;},{&quot;id&quot;:3,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:4,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t# Deepkit Restate\n     2\t\n     3\t**Deepkit Restate** is a seamless [Restate](https://restate.dev) integration for [Deepkit](https://deepkit.io). It enables effortless communication between distributed services using durable invocations, service interfaces, and event-driven architecture.\n     4\t\n     5\t&gt; This documentation assumes familiarity with Deepkit **and** Restate's concepts and lifecycle.\n     6\t\n     7\t---\n     8\t\n     9\t## Installation\n    10\t\n    11\t```bash\n    12\tnpm add deepkit-restate\n    13\t```\n    14\t\n    15\t---\n    16\t\n    17\t## Module Setup\n    18\t\n    19\tTo use Deepkit Restate, import the `RestateModule` and provide configuration for the components you need:\n    20\t\n    21\t```ts\n    22\timport { FrameworkModule } from '@deepkit/framework';\n    23\timport { RestateModule } from 'deepkit-restate';\n    24\timport { App } from '@deepkit/app';\n    25\t\n    26\tconst app = new App({\n    27\t  imports: [\n    28\t    new FrameworkModule(),\n    29\t    new RestateModule({\n    30\t      server: {\n    31\t        host: 'http://localhost',\n    32\t        port: 9080,\n    33\t      },\n    34\t      ingress: {\n    35\t        url: 'http://localhost:8080',\n    36\t      },\n    37\t      pubsub: {\n    38\t        cluster: 'default',\n    39\t        defaultStream: 'all',\n    40\t        sse: {\n    41\t          url: 'http://localhost:3000',\n    42\t        },\n    43\t      },\n    44\t      admin: {\n    45\t        url: 'http://0.0.0.0:9070',\n    46\t        deployOnStartup: true,\n    47\t      },\n    48\t    }),\n    49\t  ],\n    50\t});\n    51\t```\n    52\t\n    53\tYou can configure any combination of the following:\n    54\t\n    55\t- **server**: Starts a Restate server\n    56\t- **ingress**: Enables outbound service calls\n    57\t- **pubsub**: Enables pub/sub event system\n    58\t- **admin**: Registers deployments with the admin interface\n    59\t\n    60\t&gt; If a section is not configured, that functionality will not be available.\n    61\t\n    62\t---\n    63\t\n    64\t## Serialization (Serde) and Error Handling\n    65\t\n    66\tAll serialization and deserialization in Deepkit Restate is handled via **BSON** by default.\n    67\t\n    68\tThis means you can **return** and **accept** any types in your service handlers or saga steps, including:\n    69\t\n    70\t- Primitives (`string`, `number`, `boolean`, etc.)\n    71\t- Plain objects (`{ name: string; age: number }`)\n    72\t- Class instances (with properties and methods)\n    73\t- Complex nested types and arrays\n    74\t- Custom types supported by BSON serialization\n    75\t\n    76\tThe serialization system preserves type fidelity and structure when encoding and decoding data across the network.\n    77\t\n    78\t### Automatic Error Forwarding and Serialization\n    79\t\n    80\t- If an error is **thrown** inside a handler or saga step, it is automatically serialized and forwarded to the caller.\n    81\t- This allows errors to be **caught** remotely, preserving the error information.\n    82\t- **Custom errors with type information** are supported and **will not be retried** automatically by the system, enabling precise control over error handling and retries.\n    83\t\n    84\t&gt; We are actively working on an adapter to support JSON serialization as an alternative to BSON.\n    85\t\n    86\t---\n    87\t\n    88\t## Calling Services\n    89\t\n    90\t### `RestateClient`\n    91\t\n    92\tThe `RestateClient` handles communication between services and objects. It behaves differently depending on whether it is used within or outside an invocation context.\n    93\t\n    94\tYou can create an ingress client manually:\n    95\t\n    96\t```ts\n    97\timport { RestateIngressClient } from 'deepkit-restate';\n    98\t\n    99\tconst client = new RestateIngressClient({ url: 'http://localhost:9080' });\n   100\t```\n   101\t\n   102\tOr retrieve the configured instance via DI:\n   103\t\n   104\t```ts\n   105\tconst client = app.get&lt;RestateClient&gt;();\n   106\t```\n   107\t\n   108\t### Using the Client\n   109\t\n   110\tTo create a proxy to a **service**:\n   111\t\n   112\t```ts\n   113\tconst user = client.service&lt;UserServiceApi&gt;();\n   114\t```\n   115\t\n   116\tTo create a proxy to an **object**:\n   117\t\n   118\t```ts\n   119\tconst user = client.object&lt;UserObjectApi&gt;();\n   120\t```\n   121\t\n   122\t### Invoking Methods\n   123\t\n   124\tDurable request (waits for a result):\n   125\t\n   126\t```ts\n   127\tawait client.call(user.create());\n   128\t```\n   129\t\n   130\tFire-and-forget (does not wait for result):\n   131\t\n   132\t```ts\n   133\tawait client.send(user.create());\n   134\t```\n   135\t\n   136\tYou can configure delivery options:\n   137\t\n   138\t```ts\n   139\tawait client.send(user.create(), { delay: '10s' });\n   140\t```\n   141\t\n   142\tFor object calls, specify the key:\n   143\t\n   144\t```ts\n   145\tawait client.call('user-key', user.create());\n   146\tawait client.send('user-key', user.create());\n   147\t```\n   148\t\n   149\t---\n   150\t\n   151\t## Defining Services and Objects\n   152\t\n   153\t### Services\n   154\t\n   155\t```ts\n   156\tinterface UserServiceHandlers {\n   157\t  create(username: string): Promise&lt;User&gt;;\n   158\t}\n   159\t\n   160\ttype UserServiceApi = RestateService&lt;'user', UserServiceHandlers&gt;;\n   161\t\n   162\t@restate.service&lt;UserServiceApi&gt;()\n   163\tclass UserService implements UserServiceHandlers {\n   164\t  constructor(private readonly ctx: RestateServiceContext) {}\n   165\t\n   166\t  @restate.handler()\n   167\t  async create(username: string): Promise&lt;User&gt; {\n   168\t    return User.create(this.ctx, username);\n   169\t  }\n   170\t}\n   171\t```\n   172\t\n   173\t- Use `@restate.service()` to define a service.\n   174\t- Use `@restate.handler()` define handlers.\n   175\t- The context (`RestateServiceContext`) provides durable execution helpers.\n   176\t\n   177\t### Objects\n   178\t\n   179\t```ts\n   180\tinterface UserObjectHandlers {}\n   181\t\n   182\ttype UserObjectApi = RestateObject&lt;'user', UserObjectHandlers&gt;;\n   183\t\n   184\t@restate.object&lt;UserObjectApi&gt;()\n   185\tclass UserObject implements UserObjectHandlers {}\n   186\t```\n   187\t\n   188\tUse `@restate.object()` to define virtual objects.\n   189\t\n   190\t&gt; Shared handlers can be declared using `@restate.shared().handler()`.\n   191\t&gt; **Note:** Shared handlers use the object context, which is not type-safe. Avoid using `ctx.set()` at runtime in shared handlers.\n   192\t\n   193\t---\n   194\t\n   195\t## Dependency Injection: Calling Other Services\n   196\t\n   197\tYou can inject the client and proxy APIs into a service:\n   198\t\n   199\t```ts\n   200\t@restate.service&lt;UserServiceApi&gt;()\n   201\tclass UserService {\n   202\t  constructor(\n   203\t    private readonly client: RestateClient,\n   204\t    private readonly payment: PaymentServiceApi,\n   205\t  ) {}\n   206\t\n   207\t  @restate.handler()\n   208\t  async create(user: User): Promise&lt;void&gt; {\n   209\t    await this.client.call(this.payment.create('Test', user));\n   210\t  }\n   211\t}\n   212\t```\n   213\t\n   214\tFor objects, remember to provide a key:\n   215\t\n   216\t```ts\n   217\tawait this.client.call('payment-id', this.payment.create('Test'));\n   218\t```\n   219\t\n   220\t---\n   221\t\n   222\t## Durable Helpers\n   223\t\n   224\t### `run` blocks\n   225\t\n   226\tThe `ctx.run()` helper ensures a block is executed durably:\n   227\t\n   228\t```ts\n   229\tconst user = await this.ctx.run&lt;User&gt;('create user', () =&gt; new User(username));\n   230\t```\n   231\t\n   232\tWithout a type argument, the return value is ignored:\n   233\t\n   234\t```ts\n   235\tconst none = await this.ctx.run('create user', () =&gt; new User(username));\n   236\t```\n   237\t\n   238\t### Awakeables\n   239\t\n   240\tUsed to pause and resume execution:\n   241\t\n   242\t```ts\n   243\tconst awakeable = this.ctx.awakeable&lt;User&gt;();\n   244\t```\n   245\t\n   246\tTo resume:\n   247\t\n   248\t```ts\n   249\tthis.ctx.resolveAwakeable&lt;User&gt;();\n   250\t```\n   251\t\n   252\t### Durable State\n   253\t\n   254\tStore and retrieve durable state using the context:\n   255\t\n   256\t```ts\n   257\tawait this.ctx.set&lt;User&gt;('user', user);\n   258\t```\n   259\t\n   260\t```ts\n   261\tconst user = await this.ctx.get&lt;User&gt;('user');\n   262\t```\n   263\t\n   264\t---\n   265\t\n   266\t## Pub/Sub\n   267\t\n   268\t### Server Setup\n   269\t\n   270\tSet up a dedicated application for handling events.\n   271\t\n   272\t```ts\n   273\timport { App } from '@deepkit/app';\n   274\timport { FrameworkModule } from '@deepkit/framework';\n   275\timport { RestateModule } from 'deepkit-restate';\n   276\timport { RestatePubsubServerModule } from 'deepkit-restate/pubsub-server';\n   277\t\n   278\tawait new App({\n   279\t  imports: [\n   280\t    new FrameworkModule({ port: 9090 }),\n   281\t    new RestateModule({ server: { port: 9080 } }),\n   282\t    new RestatePubSubServerModule({\n   283\t      sse: {\n   284\t        all: true,\n   285\t        autoDiscover: true,\n   286\t        nodes: ['localhost:9090'],\n   287\t      },\n   288\t    }),\n   289\t  ],\n   290\t}).run();\n   291\t```\n   292\t\n   293\t### Publishing Events\n   294\t\n   295\tInside a service handler (durable):\n   296\t\n   297\t```ts\n   298\tconstructor(private readonly publisher: RestateEventPublisher) {}\n   299\t\n   300\tawait this.publisher.publish([new UserCreatedEvent(user)]);\n   301\t```\n   302\t\n   303\tOutside of invocation (non-durable):\n   304\t\n   305\t```ts\n   306\tconst publisher = app.get&lt;RestateEventPublisher&gt;();\n   307\tawait publisher.publish([new UserCreatedEvent(user)]);\n   308\t```\n   309\t\n   310\t&gt; Only classes are supported as events.\n   311\t\n   312\t&gt; Events are versioned by hashing their structure.\n   313\t\n   314\t### Handling Events\n   315\t\n   316\tOnly services can define event handlers:\n   317\t\n   318\t```ts\n   319\t@restate.service&lt;UserServiceApi&gt;()\n   320\tclass UserService {\n   321\t  @(restate.event&lt;UserCreatedEvent&gt;().handler())\n   322\t  async onUserCreated(event: UserCreatedEvent): Promise&lt;void&gt; {\n   323\t    // handle event\n   324\t  }\n   325\t}\n   326\t```\n   327\t\n   328\t### SSE Delivery\n   329\t\n   330\tServer-Sent Events (SSE) allow real-time delivery of events to connected subscribers.\n   331\t\n   332\t#### Subscribing to Events Outside of Services\n   333\t\n   334\tSubscribe to events from contexts like HTTP or RPC controllers:\n   335\t\n   336\t```ts\n   337\tconst subscriber = app.get&lt;RestateEventSubscriber&gt;();\n   338\t\n   339\tconst unsubscribe = await subscriber.subscribe&lt;UserCreatedEvent&gt;(event =&gt; {\n   340\t  // handle event\n   341\t});\n   342\t\n   343\tawait unsubscribe();\n   344\t```\n   345\t\n   346\tYou can also use union types to subscribe to multiple events.\n   347\t\n   348\t#### Configuration (Global)\n   349\t\n   350\tYou can configure global SSE delivery behavior in `RestatePubSubServerModule`:\n   351\t\n   352\t```ts\n   353\tnew RestatePubSubServerModule({\n   354\t  sse: {\n   355\t    all: true,\n   356\t    autoDiscover: true,\n   357\t    nodes: ['events-1.internal:9090', 'events-2.internal:9090'],\n   358\t  },\n   359\t});\n   360\t```\n   361\t\n   362\t| Option             | Type       | Description                                                                   |\n   363\t|--------------------| ---------- |-------------------------------------------------------------------------------|\n   364\t| `sse.all`          | `boolean`  | If `true`, all published events will be delivered via SSE by default.         |\n   365\t| `sse.autoDiscover` | `boolean`  | When enabled, resolves peer IPs via DNS to fan out SSE events to other nodes. |\n   366\t| `sse.nodes`        | `string[]` | List of peer server URLs for fan-out.                                         |\n   367\t\n   368\t&gt; SSE fan-out is stateless and opportunistic. Each node will attempt to push matching events to other known nodes.\n   369\t\n   370\t#### Overriding per Publish\n   371\t\n   372\tYou can override the global SSE setting by passing `{ sse: true }` in the publish options:\n   373\t\n   374\t```ts\n   375\tawait publisher.publish([new UserCreatedEvent(user)], {\n   376\t  sse: true,\n   377\t});\n   378\t```\n   379\t\n   380\tBehavior summary:\n   381\t\n   382\t- If `sse.all` is **true**, SSE is used by default unless explicitly disabled.\n   383\t- If `sse.all` is **false**, SSE is off by default — but you can still enable it by passing `sse: true`.\n   384\t\n   385\t&gt; Only events published with SSE enabled will be streamed to subscribers.\n   386\t\n   387\t# Sagas\n   388\t\n   389\tSagas provide a powerful way to orchestrate complex, long-running workflows that involve multiple services. They support **stepwise execution**, **compensation (rollback)**, **reply handling**, and **waiting for external events** (via awakeables).\n   390\t\n   391\t---\n   392\t\n   393\t## What is a Saga?\n   394\t\n   395\tA **Saga** is a workflow pattern that manages distributed transactions and side effects in a coordinated way, including compensations for failures. In Deepkit Restate, you define sagas by extending the `Saga&lt;T&gt;` class and using the `@restate.saga&lt;Api&gt;()` decorator.\n   396\t\n   397\t---\n   398\t\n   399\t## Defining a Saga Workflow\n   400\t\n   401\tSagas are defined using a fluent builder pattern in the `definition` property:\n   402\t\n   403\t- `step()`: Defines a new step in the saga.\n   404\t- `invoke(handler)`: Calls a method in your saga class to perform an action or service call.\n   405\t- `compensate(handler)`: Defines a rollback method if the step fails or the saga is aborted.\n   406\t- `onReply&lt;EventType&gt;(handler)`: Registers an event handler for replies to invoked actions.\n   407\t- `build()`: Finalizes the saga definition.\n   408\t\n   409\t---\n   410\t\n   411\t## Awakeables\n   412\t\n   413\tAwakeables are special constructs to **wait for asynchronous external events**. They provide a promise you can `await` to pause saga execution until an event occurs.\n   414\t\n   415\tCreate awakeables with the saga context inside your saga methods:\n   416\t\n   417\t```ts\n   418\tthis.confirmTicketAwakeable = this.ctx.awakeable&lt;TicketConfirmed&gt;();\n   419\t```\n   420\t\n   421\t---\n   422\t\n   423\t## Using the Saga Context\n   424\t\n   425\tThe `RestateSagaContext` (`this.ctx`) provides utilities like:\n   426\t\n   427\t- `awakeable&lt;T&gt;()`: Creates an awakeable to wait for events.\n   428\t- `set&lt;T&gt;(key, value)`: Persist state data during saga execution.\n   429\t- `get&lt;T&gt;(key)`: Retrieve persisted state.\n   430\t\n   431\t---\n   432\t\n   433\t## Calling Other Services\n   434\t\n   435\tAll service calls inside invocation handlers automatically use the underlying `client.call`. This means:\n   436\t\n   437\t- You **do not need to manually call `client.call`** within your saga handlers.\n   438\t- Only **service calls** are supported currently (no direct calls to objects).\n   439\t- The framework handles communication and reply handling.\n   440\t\n   441\t---\n   442\t\n   443\t## Example: Simplified CreateOrderSaga\n   444\t\n   445\t```ts\n   446\timport {\n   447\t  restate,\n   448\t  Saga,\n   449\t  RestateSagaContext,\n   450\t  RestateAwakeable,\n   451\t} from 'deepkit-restate';\n   452\t\n   453\t@restate.saga&lt;CreateOrderSagaApi&gt;()\n   454\texport class CreateOrderSaga extends Saga&lt;CreateOrderSagaData&gt; {\n   455\t  confirmTicketAwakeable?: RestateAwakeable&lt;TicketConfirmed&gt;;\n   456\t\n   457\t  readonly definition = this.step()\n   458\t    .invoke(this.create)\n   459\t    .compensate(this.reject)\n   460\t    .step()\n   461\t    .invoke(this.createTicket)\n   462\t    .onReply&lt;TicketCreated&gt;(this.handleTicketCreated)\n   463\t    .step()\n   464\t    .invoke(this.waitForTicketConfirmation)\n   465\t    .build();\n   466\t\n   467\t  constructor(\n   468\t    private readonly order: OrderServiceApi,\n   469\t    private readonly kitchen: KitchenServiceApi,\n   470\t    private readonly ctx: RestateSagaContext,\n   471\t  ) {\n   472\t    super();\n   473\t  }\n   474\t\n   475\t  create(data: CreateOrderSagaData) {\n   476\t    return this.order.create(data.orderId, data.orderDetails);\n   477\t  }\n   478\t\n   479\t  reject(data: CreateOrderSagaData) {\n   480\t    return this.order.reject(data.orderId);\n   481\t  }\n   482\t\n   483\t  createTicket(data: CreateOrderSagaData) {\n   484\t    this.confirmTicketAwakeable = this.ctx.awakeable&lt;TicketConfirmed&gt;();\n   485\t    return this.kitchen.createTicket(\n   486\t      data.orderDetails.restaurantId,\n   487\t      data.orderId,\n   488\t      data.orderDetails.lineItems,\n   489\t      this.confirmTicketAwakeable.id,\n   490\t    );\n   491\t  }\n   492\t\n   493\t  handleTicketCreated(data: CreateOrderSagaData, event: TicketCreated) {\n   494\t    data.ticketId = event.ticketId;\n   495\t  }\n   496\t\n   497\t  async waitForTicketConfirmation(data: CreateOrderSagaData) {\n   498\t    await this.confirmTicketAwakeable!.promise;\n   499\t  }\n   500\t}\n   501\t```\n   502\t\n   503\t## Starting a Saga and Retrieving Its State\n   504\t\n   505\tAfter defining your saga, you typically want to **start** an instance of it and later **query its state** to track progress or outcome.\n   506\t\n   507\t### Creating a Saga Client\n   508\t\n   509\tUse the client to create a saga proxy:\n   510\t\n   511\t```ts\n   512\tconst createOrderSaga = client.saga&lt;CreateOrderSagaApi&gt;();\n   513\t```\n   514\t\n   515\tThis creates a handle to interact with the saga.\n   516\t\n   517\t---\n   518\t\n   519\t### Starting a Saga Instance\n   520\t\n   521\tTo start a saga, call `start` with the saga’s unique ID and initial input data:\n   522\t\n   523\t```ts\n   524\tconst startStatus = await createOrderSaga.start(orderId, {\n   525\t  id: orderId,\n   526\t  orderTotal: 10.5,\n   527\t  customerId,\n   528\t});\n   529\t```\n   530\t\n   531\t- `orderId` uniquely identifies the saga instance.\n   532\t- The second argument is the initial data payload to pass to the saga.\n   533\t- `start` returns the initial status of saga execution.\n   534\t\n   535\t---\n   536\t\n   537\t### Querying the Saga State\n   538\t\n   539\tAt any time, you can query the current state of the saga instance by its ID using `state`:\n   540\t\n   541\t```ts\n   542\tconst state = await createOrderSaga.state(orderId);\n   543\t```\n   544\t\n   545\tThis returns the persisted saga data reflecting its current progress, e.g., which step it is on, and any state variables updated along the way.\n   546\t\n   547\t---\n   548\t\n   549\t### Notes\n   550\t\n   551\t- The saga `start` call triggers the first step of your saga workflow.\n   552\t- The saga state reflects all persisted data and progress, useful for monitoring or troubleshooting.\n   553\t- You can invoke `start` only once per unique saga instance ID.\n   554\t- Subsequent state changes happen asynchronously as the saga progresses.\n   555\t\n   556\t### Summary\n   557\t\n   558\t- Sagas manage multi-step distributed workflows with clear compensation.\n   559\t- Steps can invoke service calls, wait for replies, or wait for external events.\n   560\t- Awakeables let you asynchronously wait inside sagas for external confirmations.\n   561\t- Saga state can be persisted and retrieved with the saga context.\n   562\t- Invocation handlers automatically handle calling services; no manual client calls needed.\n   563\t- Currently, only service calls are supported, no direct object calls with keys.\n   564\t- Compensation methods help rollback on failure or abort scenarios.\n   565\t\nTotal lines in file: 565\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01WLZRdaqm895i6ejFrzTNBY&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;,&quot;folderRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-08-10T06:57:38.490Z&quot;,&quot;response_text&quot;:&quot;Now let me add documentation for the `propagateIncomingHeaders` option. I'll update both the config.ts file with a comment and the README.md with proper documentation.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;79091dd8-d662-4910-8f3e-0e505d814e45&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01MM8XKN9XY9sFaqLaQKGU48&quot;,&quot;tool_name&quot;:&quot;str-replace-editor&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;str_replace\&quot;, \&quot;path\&quot;: \&quot;README.md\&quot;, \&quot;instruction_reminder\&quot;: \&quot;ALWAYS BREAK DOWN EDITS INTO SMALLER CHUNKS OF AT MOST 150 LINES EACH.\&quot;, \&quot;old_str_1\&quot;: \&quot;const app = new App({\\n  imports: [\\n    new FrameworkModule(),\\n    new RestateModule({\\n      server: {\\n        host: 'http://localhost',\\n        port: 9080,\\n      },\\n      ingress: {\\n        url: 'http://localhost:8080',\\n      },\\n      pubsub: {\\n        cluster: 'default',\\n        defaultStream: 'all',\\n        sse: {\\n          url: 'http://localhost:3000',\\n        },\\n      },\\n      admin: {\\n        url: 'http://0.0.0.0:9070',\\n        deployOnStartup: true,\\n      },\\n    }),\\n  ],\\n});\&quot;, \&quot;new_str_1\&quot;: \&quot;const app = new App({\\n  imports: [\\n    new FrameworkModule(),\\n    new RestateModule({\\n      server: {\\n        host: 'http://localhost',\\n        port: 9080,\\n        propagateIncomingHeaders: true, // Forward all incoming headers to service calls\\n      },\\n      ingress: {\\n        url: 'http://localhost:8080',\\n      },\\n      pubsub: {\\n        cluster: 'default',\\n        defaultStream: 'all',\\n        sse: {\\n          url: 'http://localhost:3000',\\n        },\\n      },\\n      admin: {\\n        url: 'http://0.0.0.0:9070',\\n        deployOnStartup: true,\\n      },\\n    }),\\n  ],\\n});\&quot;, \&quot;old_str_start_line_number_1\&quot;: 26, \&quot;old_str_end_line_number_1\&quot;: 50}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:2,&quot;type&quot;:0,&quot;content&quot;:&quot;Now let me update the README.md to add documentation about the `propagateIncomingHeaders` option in the configuration section:\n&quot;},{&quot;id&quot;:3,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:4,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Successfully edited the file src/config.ts.\nResult for str_replace for entry with index [1]:\nReplacement successful.\nnew_str starts at line 12 and ends at line 25.\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01KRf71VhD3MppGMW9aNsMPR&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;,&quot;folderRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-08-10T06:57:52.716Z&quot;,&quot;response_text&quot;:&quot;Now let me update the README.md to add documentation about the `propagateIncomingHeaders` option in the configuration section:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;48af2576-8935-4f9d-a950-807fc5c2162f&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01EvVqYej5zJKFjeQN9iZaaw&quot;,&quot;tool_name&quot;:&quot;str-replace-editor&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;str_replace\&quot;, \&quot;path\&quot;: \&quot;README.md\&quot;, \&quot;instruction_reminder\&quot;: \&quot;ALWAYS BREAK DOWN EDITS INTO SMALLER CHUNKS OF AT MOST 150 LINES EACH.\&quot;, \&quot;old_str_1\&quot;: \&quot;You can configure any combination of the following:\\n\\n- **server**: Starts a Restate server\\n- **ingress**: Enables outbound service calls\\n- **pubsub**: Enables pub/sub event system\\n- **admin**: Registers deployments with the admin interface\\n\\n&gt; If a section is not configured, that functionality will not be available.\\n\\n---\&quot;, \&quot;new_str_1\&quot;: \&quot;You can configure any combination of the following:\\n\\n- **server**: Starts a Restate server\\n- **ingress**: Enables outbound service calls\\n- **pubsub**: Enables pub/sub event system\\n- **admin**: Registers deployments with the admin interface\\n\\n&gt; If a section is not configured, that functionality will not be available.\\n\\n## Server Configuration\\n\\nThe `server` configuration section supports the following options:\\n\\n| Option | Type | Default | Description |\\n|--------|------|---------|-------------|\\n| `host` | `string` | - | The host address for the Restate server |\\n| `port` | `number` | `9080` | The port number for the Restate server |\\n| `propagateIncomingHeaders` | `true \\\\| string[]` | `undefined` | Controls header propagation to downstream service calls |\\n\\n### Header Propagation\\n\\nThe `propagateIncomingHeaders` option controls whether incoming request headers are forwarded when making service-to-service calls:\\n\\n```ts\\n// Forward all incoming headers\\nserver: {\\n  propagateIncomingHeaders: true\\n}\\n\\n// Forward only specific headers\\nserver: {\\n  propagateIncomingHeaders: ['authorization', 'x-correlation-id', 'x-tenant-id']\\n}\\n\\n// No header propagation (default)\\nserver: {\\n  // propagateIncomingHeaders not specified\\n}\\n```\\n\\nThis is particularly useful for:\\n- **Authentication**: Forwarding authorization tokens through the service call chain\\n- **Tracing**: Propagating correlation IDs for distributed tracing\\n- **Multi-tenancy**: Passing tenant identifiers to downstream services\\n- **Custom context**: Forwarding application-specific headers\\n\\n&gt; **Note**: When `propagateIncomingHeaders` is enabled, the incoming headers are merged with any explicitly provided headers in the service call options. Explicitly provided headers take precedence over incoming headers.\\n\\n---\&quot;, \&quot;old_str_start_line_number_1\&quot;: 54, \&quot;old_str_end_line_number_1\&quot;: 62}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:2,&quot;type&quot;:0,&quot;content&quot;:&quot;Now let me add a dedicated section about the server configuration options after the module setup section:\n&quot;},{&quot;id&quot;:3,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:4,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Successfully edited the file README.md.\nResult for str_replace for entry with index [1]:\nReplacement successful.\nnew_str starts at line 26 and ends at line 51.\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01MM8XKN9XY9sFaqLaQKGU48&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;,&quot;folderRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-08-10T06:58:03.267Z&quot;,&quot;response_text&quot;:&quot;Now let me add a dedicated section about the server configuration options after the module setup section:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;c449e75d-a5d4-451e-b78e-98f7f0d29452&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;Perfect! I've successfully updated both files to document the new `propagateIncomingHeaders` option:\n\n## Changes Made:\n\n### 1. `src/config.ts`\n- Added comprehensive JSDoc documentation for the `propagateIncomingHeaders` property\n- Explained the three possible values: `true`, `string[]`, and `undefined`\n- Included use cases and examples\n\n### 2. `README.md`\n- Updated the configuration example to show the new option in use\n- Added a dedicated \&quot;Server Configuration\&quot; section with a table of all server options\n- Added a detailed \&quot;Header Propagation\&quot; subsection explaining:\n  - How to configure the option with different values\n  - Common use cases (authentication, tracing, multi-tenancy, custom context)\n  - Behavior when merging with explicitly provided headers\n\nThe documentation now clearly explains:\n- **What** the option does (propagates incoming headers to outgoing service calls)\n- **How** to configure it (with examples for each configuration type)\n- **Why** you would use it (authentication, tracing, etc.)\n- **When** headers take precedence (explicit headers override incoming ones)\n\nThis provides developers with all the information they need to understand and effectively use the `propagateIncomingHeaders` feature.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Successfully edited the file README.md.\nResult for str_replace for entry with index [1]:\nReplacement successful.\nnew_str starts at line 54 and ends at line 102.\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01EvVqYej5zJKFjeQN9iZaaw&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;,&quot;folderRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-08-10T06:58:17.129Z&quot;,&quot;response_text&quot;:&quot;Perfect! I've successfully updated both files to document the new `propagateIncomingHeaders` option:\n\n## Changes Made:\n\n### 1. `src/config.ts`\n- Added comprehensive JSDoc documentation for the `propagateIncomingHeaders` property\n- Explained the three possible values: `true`, `string[]`, and `undefined`\n- Included use cases and examples\n\n### 2. `README.md`\n- Updated the configuration example to show the new option in use\n- Added a dedicated \&quot;Server Configuration\&quot; section with a table of all server options\n- Added a detailed \&quot;Header Propagation\&quot; subsection explaining:\n  - How to configure the option with different values\n  - Common use cases (authentication, tracing, multi-tenancy, custom context)\n  - Behavior when merging with explicitly provided headers\n\nThe documentation now clearly explains:\n- **What** the option does (propagates incoming headers to outgoing service calls)\n- **How** to configure it (with examples for each configuration type)\n- **Why** you would use it (authentication, tracing, etc.)\n- **When** headers take precedence (explicit headers override incoming ones)\n\nThis provides developers with all the information they need to understand and effectively use the `propagateIncomingHeaders` feature.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;request_id&quot;:&quot;e98d2bef-8321-4496-b052-33d1e7795628&quot;,&quot;uuid&quot;:&quot;5e53a9d1-fdcb-4372-a04f-5566f1e3e6dc&quot;,&quot;chatItemType&quot;:&quot;agentic-checkpoint-delimiter&quot;,&quot;status&quot;:&quot;success&quot;,&quot;fromTimestamp&quot;:1754808796951,&quot;toTimestamp&quot;:1754809106027,&quot;seen_state&quot;:&quot;seen&quot;}],&quot;feedbackStates&quot;:{&quot;temp-fe-1e09c2c2-4cb8-4543-a338-4f4103d958c9&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-3d617c11-2d33-4ded-9f72-80fed4c3c59d&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-32878af7-509c-4438-b4ac-c496a230205c&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-7cb93629-69fc-42af-845c-cd9254b3e770&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-1c6e9c79-6984-4d02-9c0c-5b24910de1a3&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-7011ea5e-53db-4e6e-a594-de60b75b5acb&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-4c83953b-bc15-4228-8d81-8334cf7c7985&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-33fde40f-9ef2-44a4-8551-4a74c239cf88&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-68999ff6-f056-4b77-9474-1a10c7bd5e24&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{&quot;83d314c2-b470-4221-86f0-c98ae87eec1a;toolu_vrtx_01Njj3mF6sMj3koJasYC84qT&quot;:{&quot;requestId&quot;:&quot;83d314c2-b470-4221-86f0-c98ae87eec1a&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01Njj3mF6sMj3koJasYC84qT&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;The following code sections were retrieved:\nPath: src/context.ts\n     1\timport * as restate from '@restatedev/restate-sdk';\n     2\timport { ReceiveType } from '@deepkit/type';\n     3\timport { CUSTOM_TERMINAL_ERROR_CODE, RestateConfig } from './config.js';\n     4\timport { decodeRestateServiceMethodResponse } from './utils.js';\n     5\timport {\n     6\t  createBSONSerde,\n     7\t  deserializeBSONAndThrowCustomTerminalError,\n     8\t} from './serde.js';\n     9\timport {\n    10\t  RestateAwakeable,\n    11\t  RestateInvocationHandle,\n    12\t  RestateObjectContext,\n    13\t  RestateRunAction,\n    14\t  RestateSagaContext,\n    15\t  RestateServiceContext,\n    16\t  RestateSharedObjectContext,\n    17\t} from './types.js';\n    18\timport {\n    19\t  InvocationId,\n    20\t  RestatePromise,\n    21\t  RunOptions,\n    22\t} from '@restatedev/restate-sdk';\n    23\t\n    24\texport function createServiceContext(\n    25\t  ctx: restate.Context,\n    26\t  config?: RestateConfig,\n    27\t): RestateServiceContext {\n    28\t  return {\n    29\t    workflowClient: ctx.workflowClient.bind(ctx),\n    30\t    workflowSendClient: ctx.workflowSendClient.bind(ctx),\n    31\t    serviceClient: ctx.serviceClient.bind(ctx),\n    32\t    objectClient: ctx.objectClient.bind(ctx),\n    33\t    objectSendClient: ctx.objectSendClient.bind(ctx),\n    34\t    serviceSendClient: ctx.serviceSendClient.bind(ctx),\n    35\t    rand: ctx.rand,\n    36\t    date: ctx.date,\n    37\t    console: ctx.console,\n    38\t    request: ctx.request.bind(ctx),\n    39\t    sleep: ctx.sleep.bind(ctx),\n    40\t    rejectAwakeable: ctx.rejectAwakeable.bind(ctx),\n    41\t    genericCall: ctx.genericCall.bind(ctx),\n    42\t    genericSend: ctx.genericSend.bind(ctx),\n    43\t    cancel: ctx.cancel.bind(ctx),\n    44\t    attach&lt;T&gt;(\n    45\t      invocationId: InvocationId,\n    46\t      type?: ReceiveType&lt;T&gt;,\n    47\t    ): RestatePromise&lt;T&gt; {\n    48\t      const serde = createBSONSerde(type);\n    49\t      return ctx.attach(invocationId, serde);\n    50\t    },\n    51\t    resolveAwakeable&lt;T&gt;(id: string, payload?: T, type?: ReceiveType&lt;T&gt;) {\n    52\t      const serde = createBSONSerde(type);\n    53\t      ctx.resolveAwakeable(id, payload, serde);\n    54\t    },\n    55\t    awakeable&lt;T&gt;(type?: ReceiveType&lt;T&gt;): RestateAwakeable&lt;T&gt; {\n    56\t      const serde = createBSONSerde&lt;T&gt;(type);\n    57\t      return ctx.awakeable&lt;T&gt;(serde) as RestateAwakeable&lt;T&gt;;\n    58\t    },\n    59\t    run&lt;T = void&gt;(\n    60\t      name: string,\n    61\t      action: RestateRunAction&lt;T&gt;,\n    62\t      options: RunOptions&lt;unknown&gt; = {},\n    63\t      type?: ReceiveType&lt;T&gt;,\n    64\t    ): RestatePromise&lt;T&gt; {\n    65\t      if (type) {\n    66\t        const serde = createBSONSerde&lt;T&gt;(type);\n    67\t        return ctx.run(name, action, {\n    68\t          serde,\n    69\t          ...options,\n    70\t        }) as RestatePromise&lt;T&gt;;\n    71\t      }\n    72\t\n    73\t      return ctx.run(\n    74\t        name,\n    75\t        async () =&gt; {\n    76\t          await action();\n    77\t        },\n    78\t        options,\n    79\t      ) as RestatePromise&lt;never&gt;;\n    80\t    },\n    81\t    send(...args: readonly any[]): Promise&lt;RestateInvocationHandle&gt; {\n    82\t      const [key, { service, method, data }, options] =\n    83\t        typeof args[0] !== 'string' ? [undefined, ...args] : args;\n    84\t\n    85\t      const headers = config?.server?.forwardRequestHeaders\n    86\t        ? {\n    87\t            ...ctx.request().headers,\n    88\t            ...options?.headers,\n    89\t          }\n    90\t        : options?.headers;\n    91\t\n    92\t      const { invocationId } = ctx.genericSend({\n    93\t        service,\n    94\t        method,\n    95\t        parameter: data,\n    96\t        delay: options?.delay,\n    97\t        headers,\n    98\t        key,\n    99\t      });\n   100\t\n   101\t      return invocationId.then(invocationId =&gt; ({\n   102\t        invocationId,\n   103\t      }));\n   104\t    },\n   105\t    call&lt;T&gt;(...args: readonly any[]): RestatePromise&lt;T&gt; {\n   106\t      const [key, { service, method, data, deserializeReturn }, options] =\n   107\t        typeof args[0] !== 'string' ? [undefined, ...args] : args;\n   108\t\n   109\t      const headers = config?.server?.forwardRequestHeaders\n   110\t        ? {\n   111\t            ...ctx.request().headers,\n   112\t            ...options?.headers,\n   113\t          }\n   114\t        : options?.headers;\n   115\t\n   116\t      return ctx\n   117\t        .genericCall({\n   118\t          service,\n   119\t          method,\n   120\t          parameter: data,\n   121\t          headers,\n   122\t          key,\n   123\t          outputSerde: restate.serde.binary,\n   124\t        })\n   125\t        .map((value, failure) =&gt; {\n   126\t          if (value) {\n   127\t            return decodeRestateServiceMethodResponse(value, deserializeReturn);\n   128\t          }\n   129\t\n   130\t          if (\n   131\t            failure instanceof restate.TerminalError &amp;&amp;\n   132\t            failure.code === CUSTOM_TERMINAL_ERROR_CODE\n   133\t          ) {\n   134\t            deserializeBSONAndThrowCustomTerminalError(failure.message);\n   135\t          }\n   136\t\n   137\t          throw failure;\n   138\t        });\n   139\t    },\n   140\t  };\n   141\t}\n   142\t\n   143\texport function createSharedObjectContext(\n   144\t  ctx: restate.ObjectSharedContext,\n   145\t  config?: RestateConfig,\n   146\t): RestateSharedObjectContext {\n   147\t  return Object.assign(createServiceContext(ctx, config), {\n   148\t    key: ctx.key,\n   149\t    stateKeys: ctx.stateKeys.bind(ctx),\n   150\t    async get&lt;T&gt;(name: string, type?: ReceiveType&lt;T&gt;): Promise&lt;T | null&gt; {\n   151\t      const serde = createBSONSerde&lt;T&gt;(type);\n   152\t      return await ctx.get&lt;T&gt;(name, serde);\n   153\t    },\n   154\t  });\n   155\t}\n   156\t\n   157\texport function createObjectContext(\n   158\t  ctx: restate.ObjectContext,\n   159\t  config?: RestateConfig,\n   160\t): RestateObjectContext {\n   161\t  return Object.assign(createSharedObjectContext(ctx, config), {\n   162\t    clearAll: ctx.clearAll.bind(ctx),\n   163\t    clear: ctx.clear.bind(ctx),\n   164\t    set&lt;T&gt;(name: string, value: T, type?: ReceiveType&lt;T&gt;) {\n   165\t      const serde = createBSONSerde&lt;T&gt;(type);\n   166\t      ctx.set(name, value, serde);\n   167\t    },\n   168\t  });\n   169\t}\n   170\t\n   171\texport function createSagaContext(\n   172\t  ctx: restate.WorkflowContext | restate.WorkflowSharedContext,\n   173\t  config?: RestateConfig,\n   174\t): RestateSagaContext {\n   175\t  return Object.assign(createObjectContext(ctx as any, config), {\n   176\t    send: undefined,\n   177\t    call: undefined,\n   178\t  });\n   179\t}\n...\nPath: src/config.ts\n     1\timport { RestateIngressClientOptions } from './restate-ingress-client.js';\n     2\timport { RestateAdminClientOptions } from './restate-admin-client.js';\n     3\timport { RestatePubSubConfig } from './event/config.js';\n     4\t\n     5\t// indicates that it is a custom error that has to be deserialized\n     6\texport const CUSTOM_TERMINAL_ERROR_CODE = 1001;\n     7\t\n     8\texport class RestateKafkaConfig {\n     9\t  readonly clusterName: string;\n    10\t}\n    11\t\n    12\texport class RestateServerConfig {\n    13\t  readonly host?: string;\n    14\t  readonly port?: number = 9080;\n    15\t  // TODO: should be a function so that headers can be chosen at runtime\n    16\t  readonly forwardRequestHeaders?: true;\n    17\t}\n    18\t\n    19\texport class RestateConfig {\n    20\t  readonly server?: RestateServerConfig;\n    21\t  readonly ingress?: RestateIngressClientOptions;\n    22\t  readonly pubsub?: RestatePubSubConfig;\n    23\t  readonly admin?: RestateAdminClientOptions;\n    24\t  readonly kafka?: RestateKafkaConfig;\n    25\t}\n...\nPath: README.md\n...\n    95\t\n    96\t```ts\n    97\timport { RestateIngressClient } from 'deepkit-restate';\n    98\t\n    99\tconst client = new RestateIngressClient({ url: 'http://localhost:9080' });\n   100\t```\n   101\t\n   102\tOr retrieve the configured instance via DI:\n   103\t\n   104\t```ts\n   105\tconst client = app.get&lt;RestateClient&gt;();\n   106\t```\n   107\t\n   108\t### Using the Client\n   109\t\n   110\tTo create a proxy to a **service**:\n   111\t\n   112\t```ts\n   113\tconst user = client.service&lt;UserServiceApi&gt;();\n   114\t```\n   115\t\n   116\tTo create a proxy to an **object**:\n   117\t\n   118\t```ts\n   119\tconst user = client.object&lt;UserObjectApi&gt;();\n   120\t```\n   121\t\n   122\t### Invoking Methods\n   123\t\n   124\tDurable request (waits for a result):\n   125\t\n   126\t```ts\n   127\tawait client.call(user.create());\n   128\t```\n   129\t\n   130\tFire-and-forget (does not wait for result):\n   131\t\n   132\t```ts\n   133\tawait client.send(user.create());\n   134\t```\n   135\t\n   136\tYou can configure delivery options:\n   137\t\n   138\t```ts\n   139\tawait client.send(user.create(), { delay: '10s' });\n   140\t```\n...\n   410\t\n   411\t## Awakeables\n   412\t\n   413\tAwakeables are special constructs to **wait for asynchronous external events**. They provide a promise you can `await` to pause saga execution until an event occurs.\n   414\t\n   415\tCreate awakeables with the saga context inside your saga methods:\n   416\t\n   417\t```ts\n   418\tthis.confirmTicketAwakeable = this.ctx.awakeable&lt;TicketConfirmed&gt;();\n   419\t```\n   420\t\n   421\t---\n   422\t\n   423\t## Using the Saga Context\n   424\t\n   425\tThe `RestateSagaContext` (`this.ctx`) provides utilities like:\n   426\t\n   427\t- `awakeable&lt;T&gt;()`: Creates an awakeable to wait for events.\n   428\t- `set&lt;T&gt;(key, value)`: Persist state data during saga execution.\n   429\t- `get&lt;T&gt;(key)`: Retrieve persisted state.\n   430\t\n   431\t---\n   432\t\n   433\t## Calling Other Services\n   434\t\n   435\tAll service calls inside invocation handlers automatically use the underlying `client.call`. This means:\n...\nPath: src/restate-ingress-client.ts\n...\n   130\t\n   131\t  call&lt;R, A extends any[]&gt;(\n   132\t    key: string,\n   133\t    request: RestateObjectHandlerRequest&lt;R, A&gt;,\n   134\t    options?: RestateCallOptions,\n   135\t  ): Promise&lt;R&gt;;\n   136\t  call&lt;R, A extends any[]&gt;(\n   137\t    request: RestateServiceHandlerRequest&lt;R, A&gt;,\n   138\t    options?: RestateCallOptions,\n   139\t  ): Promise&lt;R&gt;;\n   140\t  async call&lt;R&gt;(...args: readonly any[]): Promise&lt;R&gt; {\n   141\t    const [key, { service, method, data, deserializeReturn }, options] =\n   142\t      typeof args[0] !== 'string' ? [undefined, ...args] : args;\n   143\t\n   144\t    const url = new URL(\n   145\t      key\n   146\t        ? `${this.opts.url}/${service}/${key}/${method}`\n   147\t        : `${this.opts.url}/${service}/${method}`,\n   148\t    );\n   149\t\n   150\t    const headers = new Headers([\n   151\t      ['content-type', 'application/octet-stream'],\n   152\t      ['accept', 'application/octet-stream'],\n   153\t    ]);\n   154\t    if (options?.idempotencyKey) {\n   155\t      headers.set('idempotency-key', options.idempotencyKey);\n   156\t    }\n...\nPath: src/types.ts\n     1\timport { ReceiveType, typeOf } from '@deepkit/type';\n     2\timport { BSONDeserializer } from '@deepkit/bson';\n     3\timport {\n     4\t  Context,\n     5\t  InvocationId,\n     6\t  type ObjectContext,\n     7\t  ObjectSharedContext,\n     8\t  RestatePromise,\n     9\t  RunOptions,\n    10\t  TerminalError,\n    11\t  WorkflowContext,\n    12\t} from '@restatedev/restate-sdk';\n    13\t\n    14\texport interface RestateInvocationHandle {\n    15\t  invocationId: string;\n    16\t}\n    17\t\n    18\texport type RestateRunAction&lt;T&gt; = () =&gt; Promise&lt;T&gt; | T;\n    19\t\n    20\texport interface RestateSendOptions extends RestateCallOptions {\n    21\t  readonly delay?: number;\n    22\t}\n    23\t\n    24\texport interface RestateCallOptions {\n    25\t  readonly headers?: Record&lt;string, string&gt;;\n    26\t  readonly idempotencyKey?: string;\n    27\t}\n...\n   113\t\n   114\texport interface RestateBaseContext extends RestateClient {\n   115\t  awakeable&lt;T&gt;(type?: ReceiveType&lt;T&gt;): RestateAwakeable&lt;T&gt;;\n   116\t  resolveAwakeable&lt;T&gt;(\n   117\t    id: string,\n   118\t    payload: NoInfer&lt;T&gt;,\n   119\t    type?: ReceiveType&lt;T&gt;,\n   120\t  ): void;\n   121\t  rejectAwakeable(id: string, reason: string): void;\n   122\t  attach&lt;T&gt;(\n   123\t    invocationId: InvocationId,\n   124\t    type?: ReceiveType&lt;T&gt;,\n   125\t  ): RestatePromise&lt;T&gt;;\n   126\t  // run should only return a value if a generic is provided\n   127\t  run(\n   128\t    name: string,\n   129\t    action: RestateRunAction&lt;unknown&gt;,\n   130\t    options?: Omit&lt;RunOptions&lt;unknown&gt;, 'serde'&gt;,\n   131\t  ): RestatePromise&lt;void&gt;;\n   132\t  run&lt;T&gt;(\n   133\t    name: string,\n   134\t    action: RestateRunAction&lt;T&gt;,\n   135\t    options?: Omit&lt;RunOptions&lt;unknown&gt;, 'serde'&gt;,\n   136\t    type?: ReceiveType&lt;T&gt;,\n   137\t  ): RestatePromise&lt;T&gt;;\n   138\t}\n...\nPath: src/restate-server.ts\n     1\timport { eventDispatcher } from '@deepkit/event';\n     2\timport {\n     3\t  onServerMainBootstrap,\n     4\t  onServerMainShutdown,\n     5\t} from '@deepkit/framework';\n     6\timport { InjectorContext } from '@deepkit/injector';\n     7\timport * as restate from '@restatedev/restate-sdk';\n     8\timport { entity, ReflectionKind } from '@deepkit/type';\n     9\timport { createServer } from 'node:http2';\n...\n    25\t  restateSagaContextType,\n    26\t  restateServiceContextType,\n    27\t  SCOPE,\n    28\t  restateClientType,\n    29\t  restateBaseContextType,\n    30\t} from './types.js';\n    31\timport { RestateIngressClient } from './restate-ingress-client.js';\n    32\timport { RestatePubSubConfig } from './event/config.js';\n    33\timport { serializeBSON } from '@deepkit/bson';\n    34\timport {\n    35\t  createObjectContext,\n    36\t  createSagaContext,\n    37\t  createServiceContext,\n    38\t  createSharedObjectContext,\n    39\t} from './context.js';\n    40\t\n    41\tconst DEFAULT_HANDLER_OPTS = {\n    42\t  input: restate.serde.binary,\n    43\t  output: restate.serde.binary,\n    44\t} as const;\n...\n    64\t\n    65\t  @eventDispatcher.listen(onServerMainBootstrap)\n    66\t  async bootstrap() {\n    67\t    const config = this.config.server!;\n    68\t\n    69\t    for (const object of this.objects) {\n    70\t      const handlers = this.createObjectHandlers(object);\n    71\t      this.endpoint.bind(\n    72\t        restate.object({ name: object.metadata.name, handlers }),\n    73\t      );\n    74\t    }\n    75\t\n    76\t    for (const service of this.services) {\n    77\t      const handlers = this.createServiceHandlers(service);\n    78\t      this.endpoint.bind(\n    79\t        restate.service({ name: service.metadata.name, handlers }),\n    80\t      );\n    81\t    }\n    82\t\n    83\t    for (const saga of this.sagas) {\n    84\t      const handlers = this.createSagaHandlers(saga);\n    85\t      this.endpoint.bind(\n    86\t        restate.workflow({ name: saga.metadata.name, handlers }),\n    87\t      );\n    88\t    }\n    89\t\n    90\t    await new Promise&lt;void&gt;(resolve =&gt; {\n    91\t      this.http2Server = createServer(this.endpoint.http2Handler());\n    92\t      this.http2Server.listen(this.config.server?.port!, resolve);\n    93\t    });\n    94\t\n    95\t    if (this.config.admin?.deployOnStartup) {\n    96\t      const admin = this.injectorContext.get(RestateAdminClient);\n    97\t      if (!config.host) {\n    98\t        throw new Error('Restate server host is missing');\n    99\t      }\n   100\t      await admin.deployments.create(`${config.host}:${config.port}`);\n   101\t    }\n   102\t\n   103\t    if (this.config.kafka) {\n   104\t      if (!this.config.admin) {\n   105\t        throw new Error('Restate admin config is missing for Kafka');\n   106\t      }\n   107\t      // TODO: filter out handlers by existing subscriptions\n   108\t      await Promise.all([\n   109\t        this.addKafkaHandlerSubscriptions('object', [...this.objects]),\n   110\t        this.addKafkaHandlerSubscriptions('service', [...this.services]),\n   111\t      ]);\n   112\t    }\n...\n   200\t\n   201\t  private createSagaHandlers({ module, classType, metadata }: InjectorSaga) {\n   202\t    return {\n   203\t      run: restate.handlers.workflow.workflow(\n   204\t        DEFAULT_HANDLER_OPTS,\n   205\t        async (rsCtx: restate.WorkflowContext, request: Uint8Array) =&gt; {\n   206\t          const injector = this.createScopedInjector();\n   207\t          const ctx = createSagaContext(rsCtx, this.config);\n   208\t          injector.set(restateClientType, ctx);\n   209\t          injector.set(restateBaseContextType, ctx);\n   210\t          injector.set(restateSagaContextType, ctx);\n   211\t          const restateSaga = injector.get(classType, module);\n   212\t          const sagaManager = new SagaManager(ctx, restateSaga, metadata);\n   213\t          const data = metadata.deserializeData(request);\n   214\t          await sagaManager.start(data);\n   215\t          await sagaManager.waitForCompletion();\n   216\t          return new Uint8Array();\n   217\t        },\n   218\t      ),\n   219\t      state: restate.handlers.workflow.shared(\n   220\t        DEFAULT_HANDLER_OPTS,\n   221\t        async (ctx: restate.WorkflowSharedContext) =&gt; {\n   222\t          const data = await ctx.get&lt;Uint8Array&gt;(\n   223\t            SAGA_STATE_KEY,\n   224\t            restate.serde.binary,\n   225\t          );\n   226\t          if (!data) {\n   227\t            throw new Error('Missing saga state');\n   228\t          }\n   229\t          return data;\n   230\t        },\n   231\t      ),\n   232\t    };\n   233\t  }\n...\n   260\t            return await this.callHandler(instance, handler, data);\n   261\t          },\n   262\t        ),\n   263\t      }),\n   264\t      {},\n   265\t    );\n   266\t  }\n   267\t\n   268\t  private async callHandler(\n   269\t    instance: any,\n   270\t    handler: RestateHandlerMetadata,\n   271\t    data: Uint8Array,\n   272\t  ): Promise&lt;Uint8Array&gt; {\n   273\t    try {\n   274\t      const args = handler.deserializeArgs(data);\n   275\t      const result = await instance[handler.name].bind(instance)(...args);\n   276\t      return serializeRestateHandlerResponse({\n   277\t        success: true,\n   278\t        data:\n   279\t          handler.returnType.kind !== ReflectionKind.void &amp;&amp;\n   280\t          handler.returnType.kind !== ReflectionKind.undefined\n   281\t            ? handler.serializeReturn(result)\n   282\t            : new Uint8Array(),\n   283\t        // TODO: use entity name\n   284\t        typeName: handler.returnType.typeName,\n   285\t      });\n...\nPath: src/event/server/config.ts\n     1\texport class RestateSseConfig {\n     2\t  readonly all?: boolean = true;\n     3\t  readonly autoDiscover?: boolean = false;\n     4\t  readonly nodes?: string[];\n     5\t}\n     6\t\n     7\texport class RestatePubSubServerConfig {\n     8\t  readonly sse: RestateSseConfig = new RestateSseConfig();\n     9\t}\n...\nPath: src/event/config.ts\n     1\texport class RestateSseConfig {\n     2\t  readonly url: string;\n     3\t}\n     4\t\n     5\texport class RestatePubSubConfig {\n     6\t  readonly defaultStream?: string = 'all';\n     7\t  readonly cluster?: string = 'default';\n     8\t  readonly sse?: RestateSseConfig;\n     9\t}\n...\nPath: src/restate.module.ts\n...\n    39\t\n    40\t  override process() {\n    41\t    if (this.config.ingress) {\n    42\t      this.addProvider(RestateIngressClient);\n    43\t    } else {\n    44\t      this.addProvider({\n    45\t        provide: RestateIngressClient,\n    46\t        useFactory() {\n    47\t          throw new Error('Restate ingress config is missing');\n    48\t        },\n    49\t      });\n    50\t    }\n    51\t    this.addProvider({\n    52\t      provide: restateClientType,\n    53\t      useExisting: RestateIngressClient,\n    54\t    });\n    55\t\n    56\t    if (this.config.pubsub) {\n    57\t      this.addImport(new RestateEventModule(this.config.pubsub));\n    58\t    }\n    59\t\n    60\t    if (this.config.admin) {\n    61\t      this.addProvider(RestateAdminClient);\n    62\t    }\n...\nPath: src/event/module.ts\n     1\timport { createModuleClass } from '@deepkit/app';\n     2\t\n     3\timport {\n     4\t  provideRestateObjectProxy,\n     5\t  provideRestateServiceProxy,\n     6\t} from '../utils.js';\n     7\timport { EventProcessorApi, EventStoreApi } from './types.js';\n     8\timport { RestateEventSubscriber } from './subscriber.js';\n     9\timport { RestateEventPublisher } from './publisher.js';\n    10\timport { RestatePubSubConfig } from './config.js';\n    11\t\n    12\texport class RestateEventModule extends createModuleClass({\n    13\t  config: RestatePubSubConfig,\n    14\t  providers: [\n    15\t    provideRes...&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;e0456c01-eb5b-4955-8acf-6f6dbb84873e;toolu_vrtx_01S4WJk32EVRjeUEkXtRVLR5&quot;:{&quot;requestId&quot;:&quot;e0456c01-eb5b-4955-8acf-6f6dbb84873e&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01S4WJk32EVRjeUEkXtRVLR5&quot;,&quot;phase&quot;:8,&quot;result&quot;:{&quot;text&quot;:&quot;The following code sections were retrieved:\nPath: README.md\n     1\t# Deepkit Restate\n     2\t\n     3\t**Deepkit Restate** is a seamless [Restate](https://restate.dev) integration for [Deepkit](https://deepkit.io). It enables effortless communication between distributed services using durable invocations, service interfaces, and event-driven architecture.\n     4\t\n     5\t&gt; This documentation assumes familiarity with Deepkit **and** Restate's concepts and lifecycle.\n     6\t\n     7\t---\n     8\t\n     9\t## Installation\n    10\t\n    11\t```bash\n    12\tnpm add deepkit-restate\n    13\t```\n    14\t\n    15\t---\n    16\t\n    17\t## Module Setup\n    18\t\n    19\tTo use Deepkit Restate, import the `RestateModule` and provide configuration for the components you need:\n    20\t\n    21\t```ts\n    22\timport { FrameworkModule } from '@deepkit/framework';\n    23\timport { RestateModule } from 'deepkit-restate';\n    24\timport { App } from '@deepkit/app';\n    25\t\n    26\tconst app = new App({\n    27\t  imports: [\n    28\t    new FrameworkModule(),\n    29\t    new RestateModule({\n    30\t      server: {\n    31\t        host: 'http://localhost',\n    32\t        port: 9080,\n    33\t      },\n    34\t      ingress: {\n    35\t        url: 'http://localhost:8080',\n    36\t      },\n    37\t      pubsub: {\n    38\t        cluster: 'default',\n    39\t        defaultStream: 'all',\n    40\t        sse: {\n    41\t          url: 'http://localhost:3000',\n    42\t        },\n    43\t      },\n    44\t      admin: {\n    45\t        url: 'http://0.0.0.0:9070',\n    46\t        deployOnStartup: true,\n    47\t      },\n    48\t    }),\n    49\t  ],\n    50\t});\n    51\t```\n    52\t\n    53\tYou can configure any combination of the following:\n    54\t\n    55\t- **server**: Starts a Restate server\n    56\t- **ingress**: Enables outbound service calls\n    57\t- **pubsub**: Enables pub/sub event system\n    58\t- **admin**: Registers deployments with the admin interface\n    59\t\n    60\t&gt; If a section is not configured, that functionality will not be available.\n    61\t\n    62\t---\n    63\t\n    64\t## Serialization (Serde) and Error Handling\n    65\t\n    66\tAll serialization and deserialization in Deepkit Restate is handled via **BSON** by default.\n    67\t\n    68\tThis means you can **return** and **accept** any types in your service handlers or saga steps, including:\n    69\t\n    70\t- Primitives (`string`, `number`, `boolean`, etc.)\n    71\t- Plain objects (`{ name: string; age: number }`)\n    72\t- Class instances (with properties and methods)\n    73\t- Complex nested types and arrays\n    74\t- Custom types supported by BSON serialization\n    75\t\n    76\tThe serialization system preserves type fidelity and structure when encoding and decoding data across the network.\n    77\t\n    78\t### Automatic Error Forwarding and Serialization\n    79\t\n    80\t- If an error is **thrown** inside a handler or saga step, it is automatically serialized and forwarded to the caller.\n    81\t- This allows errors to be **caught** remotely, preserving the error information.\n    82\t- **Custom errors with type information** are supported and **will not be retried** automatically by the system, enabling precise control over error handling and retries.\n    83\t\n    84\t&gt; We are actively working on an adapter to support JSON serialization as an alternative to BSON.\n    85\t\n    86\t---\n    87\t\n    88\t## Calling Services\n    89\t\n    90\t### `RestateClient`\n    91\t\n    92\tThe `RestateClient` handles communication between services and objects. It behaves differently depending on whether it is used within or outside an invocation context.\n    93\t\n    94\tYou can create an ingress client manually:\n    95\t\n    96\t```ts\n    97\timport { RestateIngressClient } from 'deepkit-restate';\n    98\t\n    99\tconst client = new RestateIngressClient({ url: 'http://localhost:9080' });\n   100\t```\n   101\t\n   102\tOr retrieve the configured instance via DI:\n   103\t\n   104\t```ts\n   105\tconst client = app.get&lt;RestateClient&gt;();\n   106\t```\n   107\t\n   108\t### Using the Client\n   109\t\n   110\tTo create a proxy to a **service**:\n   111\t\n   112\t```ts\n   113\tconst user = client.service&lt;UserServiceApi&gt;();\n   114\t```\n   115\t\n   116\tTo create a proxy to an **object**:\n   117\t\n   118\t```ts\n   119\tconst user = client.object&lt;UserObjectApi&gt;();\n   120\t```\n   121\t\n   122\t### Invoking Methods\n   123\t\n   124\tDurable request (waits for a result):\n   125\t\n   126\t```ts\n   127\tawait client.call(user.create());\n   128\t```\n   129\t\n   130\tFire-and-forget (does not wait for result):\n   131\t\n   132\t```ts\n   133\tawait client.send(user.create());\n   134\t```\n   135\t\n   136\tYou can configure delivery options:\n   137\t\n   138\t```ts\n   139\tawait client.send(user.create(), { delay: '10s' });\n   140\t```\n   141\t\n   142\tFor object calls, specify the key:\n   143\t\n   144\t```ts\n   145\tawait client.call('user-key', user.create());\n   146\tawait client.send('user-key', user.create());\n   147\t```\n   148\t\n   149\t---\n   150\t\n   151\t## Defining Services and Objects\n   152\t\n   153\t### Services\n   154\t\n   155\t```ts\n   156\tinterface UserServiceHandlers {\n   157\t  create(username: string): Promise&lt;User&gt;;\n   158\t}\n   159\t\n   160\ttype UserServiceApi = RestateService&lt;'user', UserServiceHandlers&gt;;\n   161\t\n   162\t@restate.service&lt;UserServiceApi&gt;()\n   163\tclass UserService implements UserServiceHandlers {\n   164\t  constructor(private readonly ctx: RestateServiceContext) {}\n   165\t\n   166\t  @restate.handler()\n   167\t  async create(username: string): Promise&lt;User&gt; {\n   168\t    return User.create(this.ctx, username);\n   169\t  }\n   170\t}\n   171\t```\n   172\t\n   173\t- Use `@restate.service()` to define a service.\n   174\t- Use `@restate.handler()` define handlers.\n   175\t- The context (`RestateServiceContext`) provides durable execution helpers.\n   176\t\n   177\t### Objects\n   178\t\n   179\t```ts\n   180\tinterface UserObjectHandlers {}\n   181\t\n   182\ttype UserObjectApi = RestateObject&lt;'user', UserObjectHandlers&gt;;\n   183\t\n   184\t@restate.object&lt;UserObjectApi&gt;()\n   185\tclass UserObject implements UserObjectHandlers {}\n   186\t```\n   187\t\n   188\tUse `@restate.object()` to define virtual objects.\n   189\t\n   190\t&gt; Shared handlers can be declared using `@restate.shared().handler()`.\n   191\t&gt; **Note:** Shared handlers use the object context, which is not type-safe. Avoid using `ctx.set()` at runtime in shared handlers.\n   192\t\n   193\t---\n   194\t\n   195\t## Dependency Injection: Calling Other Services\n   196\t\n   197\tYou can inject the client and proxy APIs into a service:\n...\n   259\t\n   260\t```ts\n   261\tconst user = await this.ctx.get&lt;User&gt;('user');\n   262\t```\n   263\t\n   264\t---\n   265\t\n   266\t## Pub/Sub\n   267\t\n   268\t### Server Setup\n   269\t\n   270\tSet up a dedicated application for handling events.\n   271\t\n   272\t```ts\n   273\timport { App } from '@deepkit/app';\n   274\timport { FrameworkModule } from '@deepkit/framework';\n   275\timport { RestateModule } from 'deepkit-restate';\n   276\timport { RestatePubsubServerModule } from 'deepkit-restate/pubsub-server';\n   277\t\n   278\tawait new App({\n   279\t  imports: [\n   280\t    new FrameworkModule({ port: 9090 }),\n   281\t    new RestateModule({ server: { port: 9080 } }),\n   282\t    new RestatePubSubServerModule({\n   283\t      sse: {\n   284\t        all: true,\n   285\t        autoDiscover: true,\n   286\t        nodes: ['localhost:9090'],\n   287\t      },\n   288\t    }),\n   289\t  ],\n   290\t}).run();\n   291\t```\n   292\t\n   293\t### Publishing Events\n   294\t\n   295\tInside a service handler (durable):\n   296\t\n   297\t```ts\n   298\tconstructor(private readonly publisher: RestateEventPublisher) {}\n...\n   326\t```\n   327\t\n   328\t### SSE Delivery\n   329\t\n   330\tServer-Sent Events (SSE) allow real-time delivery of events to connected subscribers.\n   331\t\n   332\t#### Subscribing to Events Outside of Services\n   333\t\n   334\tSubscribe to events from contexts like HTTP or RPC controllers:\n   335\t\n   336\t```ts\n   337\tconst subscriber = app.get&lt;RestateEventSubscriber&gt;();\n   338\t\n   339\tconst unsubscribe = await subscriber.subscribe&lt;UserCreatedEvent&gt;(event =&gt; {\n   340\t  // handle event\n   341\t});\n   342\t\n   343\tawait unsubscribe();\n   344\t```\n   345\t\n   346\tYou can also use union types to subscribe to multiple events.\n   347\t\n   348\t#### Configuration (Global)\n   349\t\n   350\tYou can configure global SSE delivery behavior in `RestatePubSubServerModule`:\n   351\t\n   352\t```ts\n   353\tnew RestatePubSubServerModule({\n   354\t  sse: {\n   355\t    all: true,\n   356\t    autoDiscover: true,\n   357\t    nodes: ['events-1.internal:9090', 'events-2.internal:9090'],\n   358\t  },\n   359\t});\n   360\t```\n   361\t\n   362\t| Option             | Type       | Description                                                                   |\n   363\t|--------------------| ---------- |-------------------------------------------------------------------------------|\n   364\t| `sse.all`          | `boolean`  | If `true`, all published events will be delivered via SSE by default.         |\n   365\t| `sse.autoDiscover` | `boolean`  | When enabled, resolves peer IPs via DNS to fan out SSE events to other nodes. |\n   366\t| `sse.nodes`        | `string[]` | List of peer server URLs for fan-out.                                         |\n   367\t\n   368\t&gt; SSE fan-out is stateless and opportunistic. Each node will attempt to push matching events to other known nodes.\n   369\t\n   370\t#### Overriding per Publish\n   371\t\n   372\tYou can override the global SSE setting by passing `{ sse: true }` in the publish options:\n   373\t\n   374\t```ts\n   375\tawait publisher.publish([new UserCreatedEvent(user)], {\n   376\t  sse: true,\n   377\t});\n   378\t```\n   379\t\n   380\tBehavior summary:\n   381\t\n   382\t- If `sse.all` is **true**, SSE is used by default unless explicitly disabled.\n   383\t- If `sse.all` is **false**, SSE is off by default — but you can still enable it by passing `sse: true`.\n   384\t\n   385\t&gt; Only events published with SSE enabled will be streamed to subscribers.\n   386\t\n   387\t# Sagas\n   388\t\n   389\tSagas provide a powerful way to orchestrate complex, long-running workflows that involve multiple services. They support **stepwise execution**, **compensation (rollback)**, **reply handling**, and **waiting for external events** (via awakeables).\n   390\t\n   391\t---\n   392\t\n   393\t## What is a Saga?\n   394\t\n   395\tA **Saga** is a workflow pattern that manages distributed transactions and side effects in a coordinated way, including compensations for failures. In Deepkit Restate, you define sagas by extending the `Saga&lt;T&gt;` class and using the `@restate.saga&lt;Api&gt;()` decorator.\n   396\t\n   397\t---\n   398\t\n   399\t## Defining a Saga Workflow\n   400\t\n   401\tSagas are defined using a fluent builder pattern in the `definition` property:\n   402\t\n   403\t- `step()`: Defines a new step in the saga.\n   404\t- `invoke(handler)`: Calls a method in your saga class to perform an action or service call.\n   405\t- `compensate(handler)`: Defines a rollback method if the step fails or the saga is aborted.\n   406\t- `onReply&lt;EventType&gt;(handler)`: Registers an event handler for replies to invoked actions.\n   407\t- `build()`: Finalizes the saga definition.\n   408\t\n   409\t---\n   410\t\n   411\t## Awakeables\n   412\t\n   413\tAwakeables are special constructs to **wait for asynchronous external events**. They provide a promise you can `await` to pause saga execution until an event occurs.\n   414\t\n   415\tCreate awakeables with the saga context inside your saga methods:\n   416\t\n   417\t```ts\n   418\tthis.confirmTicketAwakeable = this.ctx.awakeable&lt;TicketConfirmed&gt;();\n   419\t```\n   420\t\n   421\t---\n   422\t\n   423\t## Using the Saga Context\n   424\t\n   425\tThe `RestateSagaContext` (`this.ctx`) provides utilities like:\n   426\t\n   427\t- `awakeable&lt;T&gt;()`: Creates an awakeable to wait for events.\n   428\t- `set&lt;T&gt;(key, value)`: Persist state data during saga execution.\n   429\t- `get&lt;T&gt;(key)`: Retrieve persisted state.\n   430\t\n   431\t---\n   432\t\n   433\t## Calling Other Services\n   434\t\n   435\tAll service calls inside invocation handlers automatically use the underlying `client.call`. This means:\n...\n   550\t\n   551\t- The saga `start` call triggers the first step of your saga workflow.\n   552\t- The saga state reflects all persisted data and progress, useful for monitoring or troubleshooting.\n   553\t- You can invoke `start` only once per unique saga instance ID.\n   554\t- Subsequent state changes happen asynchronously as the saga progresses.\n   555\t\n   556\t### Summary\n   557\t\n   558\t- Sagas manage multi-step distributed workflows with clear compensation.\n   559\t- Steps can invoke service calls, wait for replies, or wait for external events.\n   560\t- Awakeables let you asynchronously wait inside sagas for external confirmations.\n   561\t- Saga state can be persisted and retrieved with the saga context.\n   562\t- Invocation handlers automatically handle calling services; no manual client calls needed.\n   563\t- Currently, only service calls are supported, no direct object calls with keys.\n   564\t- Compensation methods help rollback on failure or abort scenarios.\n...\nPath: src/config.ts\n     1\timport { RestateIngressClientOptions } from './restate-ingress-client.js';\n     2\timport { RestateAdminClientOptions } from './restate-admin-client.js';\n     3\timport { RestatePubSubConfig } from './event/config.js';\n     4\t\n     5\t// indicates that it is a custom error that has to be deserialized\n     6\texport const CUSTOM_TERMINAL_ERROR_CODE = 1001;\n     7\t\n     8\texport class RestateKafkaConfig {\n     9\t  readonly clusterName: string;\n    10\t}\n    11\t\n    12\texport class RestateServerConfig {\n    13\t  readonly host?: string;\n    14\t  readonly port?: number = 9080;\n    15\t  // TODO: should be a function so that headers can be chosen at runtime\n    16\t  readonly propagateIncomingHeaders?: true;\n    17\t}\n    18\t\n    19\texport class RestateConfig {\n    20\t  readonly server?: RestateServerConfig;\n    21\t  readonly ingress?: RestateIngressClientOptions;\n    22\t  readonly pubsub?: RestatePubSubConfig;\n    23\t  readonly admin?: RestateAdminClientOptions;\n    24\t  readonly kafka?: RestateKafkaConfig;\n    25\t}\n...\nPath: src/context.ts\n...\n    81\t    send(...args: readonly any[]): Promise&lt;RestateInvocationHandle&gt; {\n    82\t      const [key, { service, method, data }, options] =\n    83\t        typeof args[0] !== 'string' ? [undefined, ...args] : args;\n    84\t\n    85\t      const headers = config?.server?.forwardRequestHeaders\n    86\t        ? {\n    87\t            ...ctx.request().headers,\n    88\t            ...options?.headers,\n    89\t          }\n    90\t        : options?.headers;\n    91\t\n    92\t      const { invocationId } = ctx.genericSend({\n    93\t        service,\n    94\t        method,\n    95\t        parameter: data,\n    96\t        delay: options?.delay,\n    97\t        headers,\n    98\t        key,\n    99\t      });\n   100\t\n   101\t      return invocationId.then(invocationId =&gt; ({\n   102\t        invocationId,\n   103\t      }));\n   104\t    },\n   105\t    call&lt;T&gt;(...args: readonly any[]): RestatePromise&lt;T&gt; {\n   106\t      const [key, { service, method, data, deserializeReturn }, options] =\n   107\t        typeof args[0] !== 'string' ? [undefined, ...args] : args;\n   108\t\n   109\t      const headers = config?.server?.forwardRequestHeaders\n   110\t        ? {\n   111\t            ...ctx.request().headers,\n   112\t            ...options?.headers,\n   113\t          }\n   114\t        : options?.headers;\n   115\t\n   116\t      return ctx\n   117\t        .genericCall({\n   118\t          service,\n   119\t          method,\n   120\t          parameter: data,\n   121\t          headers,\n   122\t          key,\n   123\t          outputSerde: restate.serde.binary,\n   124\t        })\n   125\t        .map((value, failure) =&gt; {\n   126\t          if (value) {\n   127\t            return decodeRestateServiceMethodResponse(value, deserializeReturn);\n   128\t          }\n   129\t\n   130\t          if (\n   131\t            failure instanceof restate.TerminalError &amp;&amp;\n   132\t            failure.code === CUSTOM_TERMINAL_ERROR_CODE\n   133\t          ) {\n   134\t            deserializeBSONAndThrowCustomTerminalError(failure.message);\n   135\t          }\n   136\t\n   137\t          throw failure;\n   138\t        });\n   139\t    },\n   140\t  };\n   141\t}\n...\nPath: src/event/server/config.ts\n     1\texport class RestateSseConfig {\n     2\t  readonly all?: boolean = true;\n     3\t  readonly autoDiscover?: boolean = false;\n     4\t  readonly nodes?: string[];\n     5\t}\n     6\t\n     7\texport class RestatePubSubServerConfig {\n     8\t  readonly sse: RestateSseConfig = new RestateSseConfig();\n     9\t}\n...\nPath: docker-compose.yml\n     1\tservices:\n     2\t  restate:\n     3\t    image: docker.io/restatedev/restate:1.4\n     4\t    ports:\n     5\t      - '8080:8080'\n     6\t      - '9070:9070'\n     7\t    environment:\n     8\t      - 'RESTATE_CONFIG=/etc/config/restate.toml'\n     9\t    volumes:\n    10\t      - ./restate.toml:/etc/config/restate.toml\n    11\t    extra_hosts:\n    12\t      - 'host.docker.internal:host-gateway'\n...\nPath: src/types.ts\n...\n    28\t\n    29\ttype RestateHandlerType = 'object' | 'service';\n    30\t\n    31\texport interface RestateHandlerRequest&lt;\n    32\t  R = any,\n    33\t  A extends any[] = [],\n    34\t  T extends RestateHandlerType = any,\n    35\t&gt; {\n    36\t  readonly service: string;\n    37\t  readonly method: string;\n    38\t  readonly data: Uint8Array;\n    39\t  readonly deserializeReturn: BSONDeserializer&lt;R&gt;;\n    40\t  /** @internal */\n    41\t  readonly __type?: T;\n    42\t}\n    43\t\n    44\texport interface RestateKafkaTopic&lt;T extends string, A extends any[]&gt; {\n    45\t  readonly topic: T;\n    46\t  readonly args: A;\n    47\t}\n    48\t\n    49\texport type RestateObjectHandlerRequest&lt;\n    50\t  R = any,\n    51\t  A extends any[] = [],\n    52\t&gt; = RestateHandlerRequest&lt;R, A, 'object'&gt;;\n    53\t\n    54\texport type RestateServiceHandlerRequest&lt;\n    55\t  R = any,\n    56\t  A extends any[] = [],\n    57\t&gt; = RestateHandlerRequest&lt;R, A, 'service'&gt;;\n...\nPath: src/event/server/module.ts\n     1\timport { createModuleClass } from '@deepkit/app';\n     2\t\n     3\timport { RestateEventStore } from './event-store.js';\n     4\timport { ServerSentEventsController } from './sse.controller.js';\n     5\timport { Clusters } from './types.js';\n     6\timport { RestatePubSubServerConfig } from './config.js';\n     7\timport {\n     8\t  HttpMiddleware,\n     9\t  httpMiddleware,\n    10\t  HttpMiddlewareFn,\n    11\t} from '@deepkit/http';\n    12\timport { ClassType } from '@deepkit/core';\n    13\timport { RestateEventProcessor } from './event-processor.js';\n...\nPath: example/benchmark.ts\n...\n    88\t\n    89\tconst app = new App({\n    90\t  imports: [\n    91\t    new FrameworkModule({\n    92\t      port: 9096,\n    93\t    }),\n    94\t    new RestateModule({\n    95\t      server: {\n    96\t        host: 'http://host.docker.internal',\n    97\t        port: 9095,\n    98\t      },\n    99\t      admin: {\n   100\t        url: 'http://0.0.0.0:9070',\n   101\t        deployOnStartup: true,\n   102\t      },\n   103\t      ingress: {\n   104\t        url: 'http://0.0.0.0:8080',\n   105\t      },\n   106\t      event: {\n   107\t        host: 'localhost',\n   108\t        port: 9096,\n   109\t      },\n   110\t    }),\n   111\t    new RestatePubSubServerModule({\n   112\t      sse: {\n   113\t        hosts: ['localhost'],\n   114\t      },\n   115\t    }),\n   116\t  ],\n   117\t  controllers: [Service1, Service2, Service3],\n   118\t});\n   119\tapp.run();\n   120\t\n   121\tawait sleep(1);\n   122\t\n   123\tconst publisher = app.get&lt;RestateEventPublisher&gt;();\n   124\tconst subscriber = app.get&lt;RestateEventSubscriber&gt;();\n   125\t\n   126\tconst iterations = 1;\n   127\t\n   128\tlet receivedSubscriptionsCount = 0;\n   129\t\n   130\tawait subscriber.subscribe&lt;UserCreatedEvent&gt;(() =&gt; {\n   131\t  receivedSubscriptionsCount++;\n   132\t});\n...\nPath: src/event/server/sse.controller.ts\n     1\timport { http, HttpBody, HttpRequest, HttpResponse } from '@deepkit/http';\n     2\timport { ScopedLogger } from '@deepkit/logger';\n     3\timport { eventDispatcher } from '@deepkit/event';\n     4\timport { onServerMainBootstrapDone } from '@deepkit/framework';\n     5\timport * as dns from 'node:dns/promises';\n     6\t...&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;d7d16e00-6dfc-4041-8e7f-1a8022776274;toolu_vrtx_017fdT3XhCtYVSRTNB1u8phz&quot;:{&quot;requestId&quot;:&quot;d7d16e00-6dfc-4041-8e7f-1a8022776274&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_017fdT3XhCtYVSRTNB1u8phz&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on src/config.ts:\n     1\timport { RestateIngressClientOptions } from './restate-ingress-client.js';\n     2\timport { RestateAdminClientOptions } from './restate-admin-client.js';\n     3\timport { RestatePubSubConfig } from './event/config.js';\n     4\t\n     5\t// indicates that it is a custom error that has to be deserialized\n     6\texport const CUSTOM_TERMINAL_ERROR_CODE = 1001;\n     7\t\n     8\texport class RestateKafkaConfig {\n     9\t  readonly clusterName: string;\n    10\t}\n    11\t\n    12\texport class RestateServerConfig {\n    13\t  readonly host?: string;\n    14\t  readonly port?: number = 9080;\n    15\t  readonly propagateIncomingHeaders?: true | readonly string[];\n    16\t}\n    17\t\n    18\texport class RestateConfig {\n    19\t  readonly server?: RestateServerConfig;\n    20\t  readonly ingress?: RestateIngressClientOptions;\n    21\t  readonly pubsub?: RestatePubSubConfig;\n    22\t  readonly admin?: RestateAdminClientOptions;\n    23\t  readonly kafka?: RestateKafkaConfig;\n    24\t}\n    25\t\nTotal lines in file: 25\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;322ea7a8-1e07-41be-bfdb-b0858902ba52;toolu_vrtx_01WLZRdaqm895i6ejFrzTNBY&quot;:{&quot;requestId&quot;:&quot;322ea7a8-1e07-41be-bfdb-b0858902ba52&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01WLZRdaqm895i6ejFrzTNBY&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on README.md:\n     1\t# Deepkit Restate\n     2\t\n     3\t**Deepkit Restate** is a seamless [Restate](https://restate.dev) integration for [Deepkit](https://deepkit.io). It enables effortless communication between distributed services using durable invocations, service interfaces, and event-driven architecture.\n     4\t\n     5\t&gt; This documentation assumes familiarity with Deepkit **and** Restate's concepts and lifecycle.\n     6\t\n     7\t---\n     8\t\n     9\t## Installation\n    10\t\n    11\t```bash\n    12\tnpm add deepkit-restate\n    13\t```\n    14\t\n    15\t---\n    16\t\n    17\t## Module Setup\n    18\t\n    19\tTo use Deepkit Restate, import the `RestateModule` and provide configuration for the components you need:\n    20\t\n    21\t```ts\n    22\timport { FrameworkModule } from '@deepkit/framework';\n    23\timport { RestateModule } from 'deepkit-restate';\n    24\timport { App } from '@deepkit/app';\n    25\t\n    26\tconst app = new App({\n    27\t  imports: [\n    28\t    new FrameworkModule(),\n    29\t    new RestateModule({\n    30\t      server: {\n    31\t        host: 'http://localhost',\n    32\t        port: 9080,\n    33\t      },\n    34\t      ingress: {\n    35\t        url: 'http://localhost:8080',\n    36\t      },\n    37\t      pubsub: {\n    38\t        cluster: 'default',\n    39\t        defaultStream: 'all',\n    40\t        sse: {\n    41\t          url: 'http://localhost:3000',\n    42\t        },\n    43\t      },\n    44\t      admin: {\n    45\t        url: 'http://0.0.0.0:9070',\n    46\t        deployOnStartup: true,\n    47\t      },\n    48\t    }),\n    49\t  ],\n    50\t});\n    51\t```\n    52\t\n    53\tYou can configure any combination of the following:\n    54\t\n    55\t- **server**: Starts a Restate server\n    56\t- **ingress**: Enables outbound service calls\n    57\t- **pubsub**: Enables pub/sub event system\n    58\t- **admin**: Registers deployments with the admin interface\n    59\t\n    60\t&gt; If a section is not configured, that functionality will not be available.\n    61\t\n    62\t---\n    63\t\n    64\t## Serialization (Serde) and Error Handling\n    65\t\n    66\tAll serialization and deserialization in Deepkit Restate is handled via **BSON** by default.\n    67\t\n    68\tThis means you can **return** and **accept** any types in your service handlers or saga steps, including:\n    69\t\n    70\t- Primitives (`string`, `number`, `boolean`, etc.)\n    71\t- Plain objects (`{ name: string; age: number }`)\n    72\t- Class instances (with properties and methods)\n    73\t- Complex nested types and arrays\n    74\t- Custom types supported by BSON serialization\n    75\t\n    76\tThe serialization system preserves type fidelity and structure when encoding and decoding data across the network.\n    77\t\n    78\t### Automatic Error Forwarding and Serialization\n    79\t\n    80\t- If an error is **thrown** inside a handler or saga step, it is automatically serialized and forwarded to the caller.\n    81\t- This allows errors to be **caught** remotely, preserving the error information.\n    82\t- **Custom errors with type information** are supported and **will not be retried** automatically by the system, enabling precise control over error handling and retries.\n    83\t\n    84\t&gt; We are actively working on an adapter to support JSON serialization as an alternative to BSON.\n    85\t\n    86\t---\n    87\t\n    88\t## Calling Services\n    89\t\n    90\t### `RestateClient`\n    91\t\n    92\tThe `RestateClient` handles communication between services and objects. It behaves differently depending on whether it is used within or outside an invocation context.\n    93\t\n    94\tYou can create an ingress client manually:\n    95\t\n    96\t```ts\n    97\timport { RestateIngressClient } from 'deepkit-restate';\n    98\t\n    99\tconst client = new RestateIngressClient({ url: 'http://localhost:9080' });\n   100\t```\n   101\t\n   102\tOr retrieve the configured instance via DI:\n   103\t\n   104\t```ts\n   105\tconst client = app.get&lt;RestateClient&gt;();\n   106\t```\n   107\t\n   108\t### Using the Client\n   109\t\n   110\tTo create a proxy to a **service**:\n   111\t\n   112\t```ts\n   113\tconst user = client.service&lt;UserServiceApi&gt;();\n   114\t```\n   115\t\n   116\tTo create a proxy to an **object**:\n   117\t\n   118\t```ts\n   119\tconst user = client.object&lt;UserObjectApi&gt;();\n   120\t```\n   121\t\n   122\t### Invoking Methods\n   123\t\n   124\tDurable request (waits for a result):\n   125\t\n   126\t```ts\n   127\tawait client.call(user.create());\n   128\t```\n   129\t\n   130\tFire-and-forget (does not wait for result):\n   131\t\n   132\t```ts\n   133\tawait client.send(user.create());\n   134\t```\n   135\t\n   136\tYou can configure delivery options:\n   137\t\n   138\t```ts\n   139\tawait client.send(user.create(), { delay: '10s' });\n   140\t```\n   141\t\n   142\tFor object calls, specify the key:\n   143\t\n   144\t```ts\n   145\tawait client.call('user-key', user.create());\n   146\tawait client.send('user-key', user.create());\n   147\t```\n   148\t\n   149\t---\n   150\t\n   151\t## Defining Services and Objects\n   152\t\n   153\t### Services\n   154\t\n   155\t```ts\n   156\tinterface UserServiceHandlers {\n   157\t  create(username: string): Promise&lt;User&gt;;\n   158\t}\n   159\t\n   160\ttype UserServiceApi = RestateService&lt;'user', UserServiceHandlers&gt;;\n   161\t\n   162\t@restate.service&lt;UserServiceApi&gt;()\n   163\tclass UserService implements UserServiceHandlers {\n   164\t  constructor(private readonly ctx: RestateServiceContext) {}\n   165\t\n   166\t  @restate.handler()\n   167\t  async create(username: string): Promise&lt;User&gt; {\n   168\t    return User.create(this.ctx, username);\n   169\t  }\n   170\t}\n   171\t```\n   172\t\n   173\t- Use `@restate.service()` to define a service.\n   174\t- Use `@restate.handler()` define handlers.\n   175\t- The context (`RestateServiceContext`) provides durable execution helpers.\n   176\t\n   177\t### Objects\n   178\t\n   179\t```ts\n   180\tinterface UserObjectHandlers {}\n   181\t\n   182\ttype UserObjectApi = RestateObject&lt;'user', UserObjectHandlers&gt;;\n   183\t\n   184\t@restate.object&lt;UserObjectApi&gt;()\n   185\tclass UserObject implements UserObjectHandlers {}\n   186\t```\n   187\t\n   188\tUse `@restate.object()` to define virtual objects.\n   189\t\n   190\t&gt; Shared handlers can be declared using `@restate.shared().handler()`.\n   191\t&gt; **Note:** Shared handlers use the object context, which is not type-safe. Avoid using `ctx.set()` at runtime in shared handlers.\n   192\t\n   193\t---\n   194\t\n   195\t## Dependency Injection: Calling Other Services\n   196\t\n   197\tYou can inject the client and proxy APIs into a service:\n   198\t\n   199\t```ts\n   200\t@restate.service&lt;UserServiceApi&gt;()\n   201\tclass UserService {\n   202\t  constructor(\n   203\t    private readonly client: RestateClient,\n   204\t    private readonly payment: PaymentServiceApi,\n   205\t  ) {}\n   206\t\n   207\t  @restate.handler()\n   208\t  async create(user: User): Promise&lt;void&gt; {\n   209\t    await this.client.call(this.payment.create('Test', user));\n   210\t  }\n   211\t}\n   212\t```\n   213\t\n   214\tFor objects, remember to provide a key:\n   215\t\n   216\t```ts\n   217\tawait this.client.call('payment-id', this.payment.create('Test'));\n   218\t```\n   219\t\n   220\t---\n   221\t\n   222\t## Durable Helpers\n   223\t\n   224\t### `run` blocks\n   225\t\n   226\tThe `ctx.run()` helper ensures a block is executed durably:\n   227\t\n   228\t```ts\n   229\tconst user = await this.ctx.run&lt;User&gt;('create user', () =&gt; new User(username));\n   230\t```\n   231\t\n   232\tWithout a type argument, the return value is ignored:\n   233\t\n   234\t```ts\n   235\tconst none = await this.ctx.run('create user', () =&gt; new User(username));\n   236\t```\n   237\t\n   238\t### Awakeables\n   239\t\n   240\tUsed to pause and resume execution:\n   241\t\n   242\t```ts\n   243\tconst awakeable = this.ctx.awakeable&lt;User&gt;();\n   244\t```\n   245\t\n   246\tTo resume:\n   247\t\n   248\t```ts\n   249\tthis.ctx.resolveAwakeable&lt;User&gt;();\n   250\t```\n   251\t\n   252\t### Durable State\n   253\t\n   254\tStore and retrieve durable state using the context:\n   255\t\n   256\t```ts\n   257\tawait this.ctx.set&lt;User&gt;('user', user);\n   258\t```\n   259\t\n   260\t```ts\n   261\tconst user = await this.ctx.get&lt;User&gt;('user');\n   262\t```\n   263\t\n   264\t---\n   265\t\n   266\t## Pub/Sub\n   267\t\n   268\t### Server Setup\n   269\t\n   270\tSet up a dedicated application for handling events.\n   271\t\n   272\t```ts\n   273\timport { App } from '@deepkit/app';\n   274\timport { FrameworkModule } from '@deepkit/framework';\n   275\timport { RestateModule } from 'deepkit-restate';\n   276\timport { RestatePubsubServerModule } from 'deepkit-restate/pubsub-server';\n   277\t\n   278\tawait new App({\n   279\t  imports: [\n   280\t    new FrameworkModule({ port: 9090 }),\n   281\t    new RestateModule({ server: { port: 9080 } }),\n   282\t    new RestatePubSubServerModule({\n   283\t      sse: {\n   284\t        all: true,\n   285\t        autoDiscover: true,\n   286\t        nodes: ['localhost:9090'],\n   287\t      },\n   288\t    }),\n   289\t  ],\n   290\t}).run();\n   291\t```\n   292\t\n   293\t### Publishing Events\n   294\t\n   295\tInside a service handler (durable):\n   296\t\n   297\t```ts\n   298\tconstructor(private readonly publisher: RestateEventPublisher) {}\n   299\t\n   300\tawait this.publisher.publish([new UserCreatedEvent(user)]);\n   301\t```\n   302\t\n   303\tOutside of invocation (non-durable):\n   304\t\n   305\t```ts\n   306\tconst publisher = app.get&lt;RestateEventPublisher&gt;();\n   307\tawait publisher.publish([new UserCreatedEvent(user)]);\n   308\t```\n   309\t\n   310\t&gt; Only classes are supported as events.\n   311\t\n   312\t&gt; Events are versioned by hashing their structure.\n   313\t\n   314\t### Handling Events\n   315\t\n   316\tOnly services can define event handlers:\n   317\t\n   318\t```ts\n   319\t@restate.service&lt;UserServiceApi&gt;()\n   320\tclass UserService {\n   321\t  @(restate.event&lt;UserCreatedEvent&gt;().handler())\n   322\t  async onUserCreated(event: UserCreatedEvent): Promise&lt;void&gt; {\n   323\t    // handle event\n   324\t  }\n   325\t}\n   326\t```\n   327\t\n   328\t### SSE Delivery\n   329\t\n   330\tServer-Sent Events (SSE) allow real-time delivery of events to connected subscribers.\n   331\t\n   332\t#### Subscribing to Events Outside of Services\n   333\t\n   334\tSubscribe to events from contexts like HTTP or RPC controllers:\n   335\t\n   336\t```ts\n   337\tconst subscriber = app.get&lt;RestateEventSubscriber&gt;();\n   338\t\n   339\tconst unsubscribe = await subscriber.subscribe&lt;UserCreatedEvent&gt;(event =&gt; {\n   340\t  // handle event\n   341\t});\n   342\t\n   343\tawait unsubscribe();\n   344\t```\n   345\t\n   346\tYou can also use union types to subscribe to multiple events.\n   347\t\n   348\t#### Configuration (Global)\n   349\t\n   350\tYou can configure global SSE delivery behavior in `RestatePubSubServerModule`:\n   351\t\n   352\t```ts\n   353\tnew RestatePubSubServerModule({\n   354\t  sse: {\n   355\t    all: true,\n   356\t    autoDiscover: true,\n   357\t    nodes: ['events-1.internal:9090', 'events-2.internal:9090'],\n   358\t  },\n   359\t});\n   360\t```\n   361\t\n   362\t| Option             | Type       | Description                                                                   |\n   363\t|--------------------| ---------- |-------------------------------------------------------------------------------|\n   364\t| `sse.all`          | `boolean`  | If `true`, all published events will be delivered via SSE by default.         |\n   365\t| `sse.autoDiscover` | `boolean`  | When enabled, resolves peer IPs via DNS to fan out SSE events to other nodes. |\n   366\t| `sse.nodes`        | `string[]` | List of peer server URLs for fan-out.                                         |\n   367\t\n   368\t&gt; SSE fan-out is stateless and opportunistic. Each node will attempt to push matching events to other known nodes.\n   369\t\n   370\t#### Overriding per Publish\n   371\t\n   372\tYou can override the global SSE setting by passing `{ sse: true }` in the publish options:\n   373\t\n   374\t```ts\n   375\tawait publisher.publish([new UserCreatedEvent(user)], {\n   376\t  sse: true,\n   377\t});\n   378\t```\n   379\t\n   380\tBehavior summary:\n   381\t\n   382\t- If `sse.all` is **true**, SSE is used by default unless explicitly disabled.\n   383\t- If `sse.all` is **false**, SSE is off by default — but you can still enable it by passing `sse: true`.\n   384\t\n   385\t&gt; Only events published with SSE enabled will be streamed to subscribers.\n   386\t\n   387\t# Sagas\n   388\t\n   389\tSagas provide a powerful way to orchestrate complex, long-running workflows that involve multiple services. They support **stepwise execution**, **compensation (rollback)**, **reply handling**, and **waiting for external events** (via awakeables).\n   390\t\n   391\t---\n   392\t\n   393\t## What is a Saga?\n   394\t\n   395\tA **Saga** is a workflow pattern that manages distributed transactions and side effects in a coordinated way, including compensations for failures. In Deepkit Restate, you define sagas by extending the `Saga&lt;T&gt;` class and using the `@restate.saga&lt;Api&gt;()` decorator.\n   396\t\n   397\t---\n   398\t\n   399\t## Defining a Saga Workflow\n   400\t\n   401\tSagas are defined using a fluent builder pattern in the `definition` property:\n   402\t\n   403\t- `step()`: Defines a new step in the saga.\n   404\t- `invoke(handler)`: Calls a method in your saga class to perform an action or service call.\n   405\t- `compensate(handler)`: Defines a rollback method if the step fails or the saga is aborted.\n   406\t- `onReply&lt;EventType&gt;(handler)`: Registers an event handler for replies to invoked actions.\n   407\t- `build()`: Finalizes the saga definition.\n   408\t\n   409\t---\n   410\t\n   411\t## Awakeables\n   412\t\n   413\tAwakeables are special constructs to **wait for asynchronous external events**. They provide a promise you can `await` to pause saga execution until an event occurs.\n   414\t\n   415\tCreate awakeables with the saga context inside your saga methods:\n   416\t\n   417\t```ts\n   418\tthis.confirmTicketAwakeable = this.ctx.awakeable&lt;TicketConfirmed&gt;();\n   419\t```\n   420\t\n   421\t---\n   422\t\n   423\t## Using the Saga Context\n   424\t\n   425\tThe `RestateSagaContext` (`this.ctx`) provides utilities like:\n   426\t\n   427\t- `awakeable&lt;T&gt;()`: Creates an awakeable to wait for events.\n   428\t- `set&lt;T&gt;(key, value)`: Persist state data during saga execution.\n   429\t- `get&lt;T&gt;(key)`: Retrieve persisted state.\n   430\t\n   431\t---\n   432\t\n   433\t## Calling Other Services\n   434\t\n   435\tAll service calls inside invocation handlers automatically use the underlying `client.call`. This means:\n   436\t\n   437\t- You **do not need to manually call `client.call`** within your saga handlers.\n   438\t- Only **service calls** are supported currently (no direct calls to objects).\n   439\t- The framework handles communication and reply handling.\n   440\t\n   441\t---\n   442\t\n   443\t## Example: Simplified CreateOrderSaga\n   444\t\n   445\t```ts\n   446\timport {\n   447\t  restate,\n   448\t  Saga,\n   449\t  RestateSagaContext,\n   450\t  RestateAwakeable,\n   451\t} from 'deepkit-restate';\n   452\t\n   453\t@restate.saga&lt;CreateOrderSagaApi&gt;()\n   454\texport class CreateOrderSaga extends Saga&lt;CreateOrderSagaData&gt; {\n   455\t  confirmTicketAwakeable?: RestateAwakeable&lt;TicketConfirmed&gt;;\n   456\t\n   457\t  readonly definition = this.step()\n   458\t    .invoke(this.create)\n   459\t    .compensate(this.reject)\n   460\t    .step()\n   461\t    .invoke(this.createTicket)\n   462\t    .onReply&lt;TicketCreated&gt;(this.handleTicketCreated)\n   463\t    .step()\n   464\t    .invoke(this.waitForTicketConfirmation)\n   465\t    .build();\n   466\t\n   467\t  constructor(\n   468\t    private readonly order: OrderServiceApi,\n   469\t    private readonly kitchen: KitchenServiceApi,\n   470\t    private readonly ctx: RestateSagaContext,\n   471\t  ) {\n   472\t    super();\n   473\t  }\n   474\t\n   475\t  create(data: CreateOrderSagaData) {\n   476\t    return this.order.create(data.orderId, data.orderDetails);\n   477\t  }\n   478\t\n   479\t  reject(data: CreateOrderSagaData) {\n   480\t    return this.order.reject(data.orderId);\n   481\t  }\n   482\t\n   483\t  createTicket(data: CreateOrderSagaData) {\n   484\t    this.confirmTicketAwakeable = this.ctx.awakeable&lt;TicketConfirmed&gt;();\n   485\t    return this.kitchen.createTicket(\n   486\t      data.orderDetails.restaurantId,\n   487\t      data.orderId,\n   488\t      data.orderDetails.lineItems,\n   489\t      this.confirmTicketAwakeable.id,\n   490\t    );\n   491\t  }\n   492\t\n   493\t  handleTicketCreated(data: CreateOrderSagaData, event: TicketCreated) {\n   494\t    data.ticketId = event.ticketId;\n   495\t  }\n   496\t\n   497\t  async waitForTicketConfirmation(data: CreateOrderSagaData) {\n   498\t    await this.confirmTicketAwakeable!.promise;\n   499\t  }\n   500\t}\n   501\t```\n   502\t\n   503\t## Starting a Saga and Retrieving Its State\n   504\t\n   505\tAfter defining your saga, you typically want to **start** an instance of it and later **query its state** to track progress or outcome.\n   506\t\n   507\t### Creating a Saga Client\n   508\t\n   509\tUse the client to create a saga proxy:\n   510\t\n   511\t```ts\n   512\tconst createOrderSaga = client.saga&lt;CreateOrderSagaApi&gt;();\n   513\t```\n   514\t\n   515\tThis creates a handle to interact with the saga.\n   516\t\n   517\t---\n   518\t\n   519\t### Starting a Saga Instance\n   520\t\n   521\tTo start a saga, call `start` with the saga’s unique ID and initial input data:\n   522\t\n   523\t```ts\n   524\tconst startStatus = await createOrderSaga.start(orderId, {\n   525\t  id: orderId,\n   526\t  orderTotal: 10.5,\n   527\t  customerId,\n   528\t});\n   529\t```\n   530\t\n   531\t- `orderId` uniquely identifies the saga instance.\n   532\t- The second argument is the initial data payload to pass to the saga.\n   533\t- `start` returns the initial status of saga execution.\n   534\t\n   535\t---\n   536\t\n   537\t### Querying the Saga State\n   538\t\n   539\tAt any time, you can query the current state of the saga instance by its ID using `state`:\n   540\t\n   541\t```ts\n   542\tconst state = await createOrderSaga.state(orderId);\n   543\t```\n   544\t\n   545\tThis returns the persisted saga data reflecting its current progress, e.g., which step it is on, and any state variables updated along the way.\n   546\t\n   547\t---\n   548\t\n   549\t### Notes\n   550\t\n   551\t- The saga `start` call triggers the first step of your saga workflow.\n   552\t- The saga state reflects all persisted data and progress, useful for monitoring or troubleshooting.\n   553\t- You can invoke `start` only once per unique saga instance ID.\n   554\t- Subsequent state changes happen asynchronously as the saga progresses.\n   555\t\n   556\t### Summary\n   557\t\n   558\t- Sagas manage multi-step distributed workflows with clear compensation.\n   559\t- Steps can invoke service calls, wait for replies, or wait for external events.\n   560\t- Awakeables let you asynchronously wait inside sagas for external confirmations.\n   561\t- Saga state can be persisted and retrieved with the saga context.\n   562\t- Invocation handlers automatically handle calling services; no manual client calls needed.\n   563\t- Currently, only service calls are supported, no direct object calls with keys.\n   564\t- Compensation methods help rollback on failure or abort scenarios.\n   565\t\nTotal lines in file: 565\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;05375188-a33b-404e-b1bb-8148719462e5;toolu_vrtx_01KRf71VhD3MppGMW9aNsMPR&quot;:{&quot;requestId&quot;:&quot;05375188-a33b-404e-b1bb-8148719462e5&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01KRf71VhD3MppGMW9aNsMPR&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Successfully edited the file src/config.ts.\nResult for str_replace for entry with index [1]:\nReplacement successful.\nnew_str starts at line 12 and ends at line 25.\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;79091dd8-d662-4910-8f3e-0e505d814e45;toolu_vrtx_01MM8XKN9XY9sFaqLaQKGU48&quot;:{&quot;requestId&quot;:&quot;79091dd8-d662-4910-8f3e-0e505d814e45&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01MM8XKN9XY9sFaqLaQKGU48&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Successfully edited the file README.md.\nResult for str_replace for entry with index [1]:\nReplacement successful.\nnew_str starts at line 26 and ends at line 51.\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;48af2576-8935-4f9d-a950-807fc5c2162f;toolu_vrtx_01EvVqYej5zJKFjeQN9iZaaw&quot;:{&quot;requestId&quot;:&quot;48af2576-8935-4f9d-a950-807fc5c2162f&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01EvVqYej5zJKFjeQN9iZaaw&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Successfully edited the file README.md.\nResult for str_replace for entry with index [1]:\nReplacement successful.\nnew_str starts at line 54 and ends at line 102.\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}}},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;isAgentConversation&quot;:true,&quot;hasAgentOnboarded&quot;:true,&quot;hasDirtyEdits&quot;:true,&quot;baselineTimestamp&quot;:1754809106027},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;ab9271f3-56c6-4176-a581-2facf216289d&quot;},&quot;3ab9b7bc-fceb-46d2-9c91-1f7122fc5881&quot;:{&quot;id&quot;:&quot;3ab9b7bc-fceb-46d2-9c91-1f7122fc5881&quot;,&quot;createdAtIso&quot;:&quot;2025-08-10T06:32:38.603Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-08-10T06:33:28.702Z&quot;,&quot;chatHistory&quot;:[{&quot;request_id&quot;:&quot;a0370767-cbde-4fed-8a87-ebca187fa6db&quot;,&quot;uuid&quot;:&quot;2df60154-abe4-4519-bb2f-0dde6c9cff7c&quot;,&quot;chatItemType&quot;:&quot;agentic-checkpoint-delimiter&quot;,&quot;status&quot;:&quot;success&quot;,&quot;fromTimestamp&quot;:0,&quot;toTimestamp&quot;:1754807558605,&quot;seen_state&quot;:&quot;seen&quot;},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;dd1f6914-2af3-44a6-966c-d31110a659b2&quot;,&quot;request_message&quot;:&quot;i want to omit all keys from ObjectContext that are in RestateCustomContext&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;i want to omit all keys from ObjectContext that are in RestateCustomContext&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;You need to update the `ContextWithoutClients` type to also omit the keys from `RestateCustomContext`. Here's the fix:\n\n&lt;augment_code_snippet path=\&quot;src/types.ts\&quot; mode=\&quot;EDIT\&quot;&gt;\n```typescript\ntype ContextWithoutClients&lt;T&gt; = Omit&lt;\n  T,\n  | 'attach'\n  | 'run'\n  | 'get'\n  | 'set'\n  | 'resolveAwakeable'\n  | 'awakeable'\n  | 'send'\n  | 'call'\n&gt;;\n```\n&lt;/augment_code_snippet&gt;\n\nThis adds `'send'` and `'call'` to the omitted keys since those are the methods from `RestateCustomContext` (which extends `RestateClient`) that would otherwise conflict with the `ObjectContext` methods.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;src/types.ts:0-660\nsrc/types.ts:660-1364\nsrc/types.ts:1364-2071\nsrc/types.ts:2071-2887\nsrc/types.ts:2887-3627\nsrc/types.ts:3627-4424\nsrc/types.ts:4424-4815\nsrc/types.ts:4815-5481\nsrc/context-storage.ts:0-573\nsrc/context-storage.ts:573-1347\nsrc/context-storage.ts:1347-1767\nsrc/context.ts:0-604\nsrc/context.ts:604-1386\nsrc/context.ts:1386-2073\nsrc/context.ts:2073-2519\nsrc/context.ts:2519-3325\nsrc/context.ts:3325-4104\nsrc/context.ts:4104-4336\nsrc/restate-server.ts:362-1111\nsrc/restate-server.ts:1111-1690\nsrc/restate-server.ts:2297-3028\nsrc/restate-server.ts:4818-5291\nsrc/restate-server.ts:5858-6734\nsrc/restate-server.ts:6734-7599\nsrc/restate-server.ts:7599-7997\nsrc/restate-server.ts:7997-8953\nREADME.md:1192-1765\nREADME.md:2893-3639\nREADME.md:4254-4999\nREADME.md:5311-6060\nREADME.md:9636-10389\nREADME.md:10389-11123\nREADME.md:11123-11489\nsrc/restate.module.ts:122-900\nsrc/restate.module.ts:900-1364\nsrc/restate.module.ts:1364-2166\nsrc/restate.module.ts:2166-3171\nsrc/restate.module.ts:3171-3938\nsrc/saga/saga-instance.ts:0-415\nsrc/saga/saga-instance.ts:415-1177\nsrc/saga/saga-manager.ts:0-738\nsrc/objects.ts:0-378\nsrc/saga/step-builder.ts:4676-5464\nsrc/decorator.ts:2018-2482\nsrc/decorator.ts:4665-5199\nsrc/decorator.ts:5992-6398\nsrc/decorator.ts:7930-8770\nsrc/decorator.ts:8770-9376\nsrc/kafka/producer.ts:0-758\nsrc/utils.ts:661-1454\nsrc/utils.ts:5229-5989\nsrc/restate-ingress-client.ts:184-954\nexample/benchmark.ts:673-1291\nrestate.toml:0-141\nexample/bunfig.toml:0-26&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;i want to omit all keys from ObjectContext that are in RestateCustomContext&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;,&quot;folderRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-08-10T06:32:56.348Z&quot;,&quot;response_text&quot;:&quot;You need to update the `ContextWithoutClients` type to also omit the keys from `RestateCustomContext`. Here's the fix:\n\n````typescript path=src/types.ts mode=EDIT\ntype ContextWithoutClients&lt;T&gt; = Omit&lt;\n  T,\n  | 'attach'\n  | 'run'\n  | 'get'\n  | 'set'\n  | 'resolveAwakeable'\n  | 'awakeable'\n  | 'send'\n  | 'call'\n&gt;;\n````\n\nThis adds `'send'` and `'call'` to the omitted keys since those are the methods from `RestateCustomContext` (which extends `RestateClient`) that would otherwise conflict with the `ObjectContext` methods.\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;660&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;660&quot;,&quot;char_end&quot;:&quot;1364&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;1364&quot;,&quot;char_end&quot;:&quot;2071&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;2071&quot;,&quot;char_end&quot;:&quot;2887&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;2887&quot;,&quot;char_end&quot;:&quot;3627&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;3627&quot;,&quot;char_end&quot;:&quot;4424&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;4424&quot;,&quot;char_end&quot;:&quot;4815&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;4815&quot;,&quot;char_end&quot;:&quot;5481&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;573&quot;,&quot;blob_name&quot;:&quot;b865bbf9f240f15f2aec262b8fc08c22fce14c6dd5bf147aeb5ae8e4689478df&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/context-storage.ts&quot;}},{&quot;char_start&quot;:&quot;573&quot;,&quot;char_end&quot;:&quot;1347&quot;,&quot;blob_name&quot;:&quot;b865bbf9f240f15f2aec262b8fc08c22fce14c6dd5bf147aeb5ae8e4689478df&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/context-storage.ts&quot;}},{&quot;char_start&quot;:&quot;1347&quot;,&quot;char_end&quot;:&quot;1767&quot;,&quot;blob_name&quot;:&quot;b865bbf9f240f15f2aec262b8fc08c22fce14c6dd5bf147aeb5ae8e4689478df&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/context-storage.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;604&quot;,&quot;blob_name&quot;:&quot;a38faa08178ae07490cef0099700ea13901fc97f4be91340e714e514fc10c1ce&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/context.ts&quot;}},{&quot;char_start&quot;:&quot;604&quot;,&quot;char_end&quot;:&quot;1386&quot;,&quot;blob_name&quot;:&quot;a38faa08178ae07490cef0099700ea13901fc97f4be91340e714e514fc10c1ce&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/context.ts&quot;}},{&quot;char_start&quot;:&quot;1386&quot;,&quot;char_end&quot;:&quot;2073&quot;,&quot;blob_name&quot;:&quot;a38faa08178ae07490cef0099700ea13901fc97f4be91340e714e514fc10c1ce&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/context.ts&quot;}},{&quot;char_start&quot;:&quot;2073&quot;,&quot;char_end&quot;:&quot;2519&quot;,&quot;blob_name&quot;:&quot;a38faa08178ae07490cef0099700ea13901fc97f4be91340e714e514fc10c1ce&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/context.ts&quot;}},{&quot;char_start&quot;:&quot;2519&quot;,&quot;char_end&quot;:&quot;3325&quot;,&quot;blob_name&quot;:&quot;a38faa08178ae07490cef0099700ea13901fc97f4be91340e714e514fc10c1ce&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/context.ts&quot;}},{&quot;char_start&quot;:&quot;3325&quot;,&quot;char_end&quot;:&quot;4104&quot;,&quot;blob_name&quot;:&quot;a38faa08178ae07490cef0099700ea13901fc97f4be91340e714e514fc10c1ce&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/context.ts&quot;}},{&quot;char_start&quot;:&quot;4104&quot;,&quot;char_end&quot;:&quot;4336&quot;,&quot;blob_name&quot;:&quot;a38faa08178ae07490cef0099700ea13901fc97f4be91340e714e514fc10c1ce&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/context.ts&quot;}},{&quot;char_start&quot;:&quot;362&quot;,&quot;char_end&quot;:&quot;1111&quot;,&quot;blob_name&quot;:&quot;b70331ad8c6674cfb716418e7833e4db2e522b5ebbebcbde3f1f8c2b270323a8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/restate-server.ts&quot;}},{&quot;char_start&quot;:&quot;1111&quot;,&quot;char_end&quot;:&quot;1690&quot;,&quot;blob_name&quot;:&quot;b70331ad8c6674cfb716418e7833e4db2e522b5ebbebcbde3f1f8c2b270323a8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/restate-server.ts&quot;}},{&quot;char_start&quot;:&quot;2297&quot;,&quot;char_end&quot;:&quot;3028&quot;,&quot;blob_name&quot;:&quot;b70331ad8c6674cfb716418e7833e4db2e522b5ebbebcbde3f1f8c2b270323a8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/restate-server.ts&quot;}},{&quot;char_start&quot;:&quot;4818&quot;,&quot;char_end&quot;:&quot;5291&quot;,&quot;blob_name&quot;:&quot;b70331ad8c6674cfb716418e7833e4db2e522b5ebbebcbde3f1f8c2b270323a8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/restate-server.ts&quot;}},{&quot;char_start&quot;:&quot;5858&quot;,&quot;char_end&quot;:&quot;6734&quot;,&quot;blob_name&quot;:&quot;b70331ad8c6674cfb716418e7833e4db2e522b5ebbebcbde3f1f8c2b270323a8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/restate-server.ts&quot;}},{&quot;char_start&quot;:&quot;6734&quot;,&quot;char_end&quot;:&quot;7599&quot;,&quot;blob_name&quot;:&quot;b70331ad8c6674cfb716418e7833e4db2e522b5ebbebcbde3f1f8c2b270323a8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/restate-server.ts&quot;}},{&quot;char_start&quot;:&quot;7599&quot;,&quot;char_end&quot;:&quot;7997&quot;,&quot;blob_name&quot;:&quot;b70331ad8c6674cfb716418e7833e4db2e522b5ebbebcbde3f1f8c2b270323a8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/restate-server.ts&quot;}},{&quot;char_start&quot;:&quot;7997&quot;,&quot;char_end&quot;:&quot;8953&quot;,&quot;blob_name&quot;:&quot;b70331ad8c6674cfb716418e7833e4db2e522b5ebbebcbde3f1f8c2b270323a8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/restate-server.ts&quot;}},{&quot;char_start&quot;:&quot;1192&quot;,&quot;char_end&quot;:&quot;1765&quot;,&quot;blob_name&quot;:&quot;de1bf57e8bc3560117d27bc255d02d229c7a56c7a9b68a727da6cd2c0a535974&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;2893&quot;,&quot;char_end&quot;:&quot;3639&quot;,&quot;blob_name&quot;:&quot;de1bf57e8bc3560117d27bc255d02d229c7a56c7a9b68a727da6cd2c0a535974&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;4254&quot;,&quot;char_end&quot;:&quot;4999&quot;,&quot;blob_name&quot;:&quot;de1bf57e8bc3560117d27bc255d02d229c7a56c7a9b68a727da6cd2c0a535974&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;5311&quot;,&quot;char_end&quot;:&quot;6060&quot;,&quot;blob_name&quot;:&quot;de1bf57e8bc3560117d27bc255d02d229c7a56c7a9b68a727da6cd2c0a535974&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;9636&quot;,&quot;char_end&quot;:&quot;10389&quot;,&quot;blob_name&quot;:&quot;de1bf57e8bc3560117d27bc255d02d229c7a56c7a9b68a727da6cd2c0a535974&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;10389&quot;,&quot;char_end&quot;:&quot;11123&quot;,&quot;blob_name&quot;:&quot;de1bf57e8bc3560117d27bc255d02d229c7a56c7a9b68a727da6cd2c0a535974&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;11123&quot;,&quot;char_end&quot;:&quot;11489&quot;,&quot;blob_name&quot;:&quot;de1bf57e8bc3560117d27bc255d02d229c7a56c7a9b68a727da6cd2c0a535974&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;122&quot;,&quot;char_end&quot;:&quot;900&quot;,&quot;blob_name&quot;:&quot;3e3053d554b4ea1b4a4a4dc267517a7ea9169fb6144d380076717df4b2f6a9b2&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/restate.module.ts&quot;}},{&quot;char_start&quot;:&quot;900&quot;,&quot;char_end&quot;:&quot;1364&quot;,&quot;blob_name&quot;:&quot;3e3053d554b4ea1b4a4a4dc267517a7ea9169fb6144d380076717df4b2f6a9b2&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/restate.module.ts&quot;}},{&quot;char_start&quot;:&quot;1364&quot;,&quot;char_end&quot;:&quot;2166&quot;,&quot;blob_name&quot;:&quot;3e3053d554b4ea1b4a4a4dc267517a7ea9169fb6144d380076717df4b2f6a9b2&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/restate.module.ts&quot;}},{&quot;char_start&quot;:&quot;2166&quot;,&quot;char_end&quot;:&quot;3171&quot;,&quot;blob_name&quot;:&quot;3e3053d554b4ea1b4a4a4dc267517a7ea9169fb6144d380076717df4b2f6a9b2&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/restate.module.ts&quot;}},{&quot;char_start&quot;:&quot;3171&quot;,&quot;char_end&quot;:&quot;3938&quot;,&quot;blob_name&quot;:&quot;3e3053d554b4ea1b4a4a4dc267517a7ea9169fb6144d380076717df4b2f6a9b2&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/restate.module.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;415&quot;,&quot;blob_name&quot;:&quot;b30f9a63f6691b6a597e5faf98a2e8f86bbef99d6a619ebff12cbac0537aa44c&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/saga/saga-instance.ts&quot;}},{&quot;char_start&quot;:&quot;415&quot;,&quot;char_end&quot;:&quot;1177&quot;,&quot;blob_name&quot;:&quot;b30f9a63f6691b6a597e5faf98a2e8f86bbef99d6a619ebff12cbac0537aa44c&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/saga/saga-instance.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;738&quot;,&quot;blob_name&quot;:&quot;ef02492c4d25a3a794756d989d2aaebb612dbfdea83dec5366353e64610a5619&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/saga/saga-manager.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;378&quot;,&quot;blob_name&quot;:&quot;e1b94e1d3e88ebc514e908974a533e769f70453f126998675853a401ea27ab6b&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/objects.ts&quot;}},{&quot;char_start&quot;:&quot;4676&quot;,&quot;char_end&quot;:&quot;5464&quot;,&quot;blob_name&quot;:&quot;62f2ce6ab5ecd6c818064fb8700181322cae254d898dfd63da0f8c7f31e95434&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/saga/step-builder.ts&quot;}},{&quot;char_start&quot;:&quot;2018&quot;,&quot;char_end&quot;:&quot;2482&quot;,&quot;blob_name&quot;:&quot;45989fc32704b030fa9da6d3cc222a30eaad896ca4eb6cae66ef7bdab89710a8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/decorator.ts&quot;}},{&quot;char_start&quot;:&quot;4665&quot;,&quot;char_end&quot;:&quot;5199&quot;,&quot;blob_name&quot;:&quot;45989fc32704b030fa9da6d3cc222a30eaad896ca4eb6cae66ef7bdab89710a8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/decorator.ts&quot;}},{&quot;char_start&quot;:&quot;5992&quot;,&quot;char_end&quot;:&quot;6398&quot;,&quot;blob_name&quot;:&quot;45989fc32704b030fa9da6d3cc222a30eaad896ca4eb6cae66ef7bdab89710a8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/decorator.ts&quot;}},{&quot;char_start&quot;:&quot;7930&quot;,&quot;char_end&quot;:&quot;8770&quot;,&quot;blob_name&quot;:&quot;45989fc32704b030fa9da6d3cc222a30eaad896ca4eb6cae66ef7bdab89710a8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/decorator.ts&quot;}},{&quot;char_start&quot;:&quot;8770&quot;,&quot;char_end&quot;:&quot;9376&quot;,&quot;blob_name&quot;:&quot;45989fc32704b030fa9da6d3cc222a30eaad896ca4eb6cae66ef7bdab89710a8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/decorator.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;758&quot;,&quot;blob_name&quot;:&quot;537160cc3ceab55b6abedcb7c7fcd89bea1fe52435ce5beb7bc6dedb448d6e33&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/kafka/producer.ts&quot;}},{&quot;char_start&quot;:&quot;661&quot;,&quot;char_end&quot;:&quot;1454&quot;,&quot;blob_name&quot;:&quot;4019a5d1baa8c7b0ef552e329647a7d500f48a8ba05f681f1c50a1572243f7c8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.ts&quot;}},{&quot;char_start&quot;:&quot;5229&quot;,&quot;char_end&quot;:&quot;5989&quot;,&quot;blob_name&quot;:&quot;4019a5d1baa8c7b0ef552e329647a7d500f48a8ba05f681f1c50a1572243f7c8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.ts&quot;}},{&quot;char_start&quot;:&quot;184&quot;,&quot;char_end&quot;:&quot;954&quot;,&quot;blob_name&quot;:&quot;0d4bbe37ffb4f862fdc18a21bc08584184aeef5e8406762492720bf9f0667d73&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/restate-ingress-client.ts&quot;}},{&quot;char_start&quot;:&quot;673&quot;,&quot;char_end&quot;:&quot;1291&quot;,&quot;blob_name&quot;:&quot;a5a8300f63e4137f800ee97f4e428d94cbc71a406a6c21a5270e0eec9cd593cf&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;example/benchmark.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;141&quot;,&quot;blob_name&quot;:&quot;1a02ad1c618587401cb8656ac52f59b54b694576f2660e0a9a2c66eae3b7e458&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;restate.toml&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;26&quot;,&quot;blob_name&quot;:&quot;3c118eb00f36348d2cbdfd7b658f77fef08fabb5b00ee22561a23149498bff85&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;example/bunfig.toml&quot;}}]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;d11c9d8f-4d11-4842-bc25-a119e07361f9&quot;,&quot;request_message&quot;:&quot;i want an utility types that takes the keys from object a and removes them from object b&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;i want an utility types that takes the keys from object a and removes them from object b&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:0,&quot;content&quot;:&quot;You can create a utility type that removes keys from one object type based on another object's keys:\n\n&lt;augment_code_snippet path=\&quot;src/types.ts\&quot; mode=\&quot;EDIT\&quot;&gt;\n```typescript\ntype OmitKeys&lt;T, U&gt; = Omit&lt;T, keyof U&gt;;\n\ntype ContextWithoutClients&lt;T&gt; = OmitKeys&lt;T, RestateCustomContext&gt;;\n```\n&lt;/augment_code_snippet&gt;\n\nThis `OmitKeys&lt;T, U&gt;` utility type takes all the keys from type `U` and removes them from type `T`. Now `ContextWithoutClients&lt;T&gt;` will automatically omit all keys that exist in `RestateCustomContext` from the provided type `T`.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;src/types.ts:0-660\nsrc/types.ts:660-1364\nsrc/types.ts:1364-2071\nsrc/types.ts:2071-2887\nsrc/types.ts:2887-3627\nsrc/types.ts:3627-4424\nsrc/types.ts:4424-4815\nsrc/types.ts:4815-5481\nsrc/utils.ts:0-661\nsrc/utils.ts:661-1454\nsrc/utils.ts:2131-2796\nsrc/utils.ts:2796-3319\nsrc/utils.ts:3319-3911\nsrc/utils.ts:3911-4302\nsrc/utils.ts:4302-5229\nsrc/utils.ts:5229-5989\nsrc/utils.ts:5989-6732\nsrc/utils.ts:6732-7535\nsrc/utils.ts:7535-8334\nsrc/utils.ts:8334-8735\nsrc/utils.spec.ts:0-591\nsrc/utils.spec.ts:591-1374\nsrc/utils.spec.ts:1374-2020\nsrc/utils.spec.ts:2864-3486\nsrc/utils.spec.ts:3486-4286\nsrc/utils.spec.ts:4286-4910\nsrc/decorator.ts:0-573\nREADME.md:2893-3639\nREADME.md:5311-6060\nsrc/context.ts:3325-4104&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;i want an utility types that takes the keys from object a and removes them from object b&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;,&quot;folderRoot&quot;:&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-08-10T06:33:28.702Z&quot;,&quot;response_text&quot;:&quot;You can create a utility type that removes keys from one object type based on another object's keys:\n\n````typescript path=src/types.ts mode=EDIT\ntype OmitKeys&lt;T, U&gt; = Omit&lt;T, keyof U&gt;;\n\ntype ContextWithoutClients&lt;T&gt; = OmitKeys&lt;T, RestateCustomContext&gt;;\n````\n\nThis `OmitKeys&lt;T, U&gt;` utility type takes all the keys from type `U` and removes them from type `T`. Now `ContextWithoutClients&lt;T&gt;` will automatically omit all keys that exist in `RestateCustomContext` from the provided type `T`.\n&quot;,&quot;workspace_file_chunks&quot;:[{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;660&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;660&quot;,&quot;char_end&quot;:&quot;1364&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;1364&quot;,&quot;char_end&quot;:&quot;2071&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;2071&quot;,&quot;char_end&quot;:&quot;2887&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;2887&quot;,&quot;char_end&quot;:&quot;3627&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;3627&quot;,&quot;char_end&quot;:&quot;4424&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;4424&quot;,&quot;char_end&quot;:&quot;4815&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;4815&quot;,&quot;char_end&quot;:&quot;5481&quot;,&quot;blob_name&quot;:&quot;cf5f663d2c8f011e34fccf1263312591253d709a12a33f3b980746434d96d7a3&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/types.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;661&quot;,&quot;blob_name&quot;:&quot;4019a5d1baa8c7b0ef552e329647a7d500f48a8ba05f681f1c50a1572243f7c8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.ts&quot;}},{&quot;char_start&quot;:&quot;661&quot;,&quot;char_end&quot;:&quot;1454&quot;,&quot;blob_name&quot;:&quot;4019a5d1baa8c7b0ef552e329647a7d500f48a8ba05f681f1c50a1572243f7c8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.ts&quot;}},{&quot;char_start&quot;:&quot;2131&quot;,&quot;char_end&quot;:&quot;2796&quot;,&quot;blob_name&quot;:&quot;4019a5d1baa8c7b0ef552e329647a7d500f48a8ba05f681f1c50a1572243f7c8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.ts&quot;}},{&quot;char_start&quot;:&quot;2796&quot;,&quot;char_end&quot;:&quot;3319&quot;,&quot;blob_name&quot;:&quot;4019a5d1baa8c7b0ef552e329647a7d500f48a8ba05f681f1c50a1572243f7c8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.ts&quot;}},{&quot;char_start&quot;:&quot;3319&quot;,&quot;char_end&quot;:&quot;3911&quot;,&quot;blob_name&quot;:&quot;4019a5d1baa8c7b0ef552e329647a7d500f48a8ba05f681f1c50a1572243f7c8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.ts&quot;}},{&quot;char_start&quot;:&quot;3911&quot;,&quot;char_end&quot;:&quot;4302&quot;,&quot;blob_name&quot;:&quot;4019a5d1baa8c7b0ef552e329647a7d500f48a8ba05f681f1c50a1572243f7c8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.ts&quot;}},{&quot;char_start&quot;:&quot;4302&quot;,&quot;char_end&quot;:&quot;5229&quot;,&quot;blob_name&quot;:&quot;4019a5d1baa8c7b0ef552e329647a7d500f48a8ba05f681f1c50a1572243f7c8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.ts&quot;}},{&quot;char_start&quot;:&quot;5229&quot;,&quot;char_end&quot;:&quot;5989&quot;,&quot;blob_name&quot;:&quot;4019a5d1baa8c7b0ef552e329647a7d500f48a8ba05f681f1c50a1572243f7c8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.ts&quot;}},{&quot;char_start&quot;:&quot;5989&quot;,&quot;char_end&quot;:&quot;6732&quot;,&quot;blob_name&quot;:&quot;4019a5d1baa8c7b0ef552e329647a7d500f48a8ba05f681f1c50a1572243f7c8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.ts&quot;}},{&quot;char_start&quot;:&quot;6732&quot;,&quot;char_end&quot;:&quot;7535&quot;,&quot;blob_name&quot;:&quot;4019a5d1baa8c7b0ef552e329647a7d500f48a8ba05f681f1c50a1572243f7c8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.ts&quot;}},{&quot;char_start&quot;:&quot;7535&quot;,&quot;char_end&quot;:&quot;8334&quot;,&quot;blob_name&quot;:&quot;4019a5d1baa8c7b0ef552e329647a7d500f48a8ba05f681f1c50a1572243f7c8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.ts&quot;}},{&quot;char_start&quot;:&quot;8334&quot;,&quot;char_end&quot;:&quot;8735&quot;,&quot;blob_name&quot;:&quot;4019a5d1baa8c7b0ef552e329647a7d500f48a8ba05f681f1c50a1572243f7c8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;591&quot;,&quot;blob_name&quot;:&quot;25297fa4b7f595804d7d51a1054917dad44e1aba5cefb9be85335b216a1b987f&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.spec.ts&quot;}},{&quot;char_start&quot;:&quot;591&quot;,&quot;char_end&quot;:&quot;1374&quot;,&quot;blob_name&quot;:&quot;25297fa4b7f595804d7d51a1054917dad44e1aba5cefb9be85335b216a1b987f&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.spec.ts&quot;}},{&quot;char_start&quot;:&quot;1374&quot;,&quot;char_end&quot;:&quot;2020&quot;,&quot;blob_name&quot;:&quot;25297fa4b7f595804d7d51a1054917dad44e1aba5cefb9be85335b216a1b987f&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.spec.ts&quot;}},{&quot;char_start&quot;:&quot;2864&quot;,&quot;char_end&quot;:&quot;3486&quot;,&quot;blob_name&quot;:&quot;25297fa4b7f595804d7d51a1054917dad44e1aba5cefb9be85335b216a1b987f&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.spec.ts&quot;}},{&quot;char_start&quot;:&quot;3486&quot;,&quot;char_end&quot;:&quot;4286&quot;,&quot;blob_name&quot;:&quot;25297fa4b7f595804d7d51a1054917dad44e1aba5cefb9be85335b216a1b987f&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.spec.ts&quot;}},{&quot;char_start&quot;:&quot;4286&quot;,&quot;char_end&quot;:&quot;4910&quot;,&quot;blob_name&quot;:&quot;25297fa4b7f595804d7d51a1054917dad44e1aba5cefb9be85335b216a1b987f&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/utils.spec.ts&quot;}},{&quot;char_start&quot;:&quot;0&quot;,&quot;char_end&quot;:&quot;573&quot;,&quot;blob_name&quot;:&quot;45989fc32704b030fa9da6d3cc222a30eaad896ca4eb6cae66ef7bdab89710a8&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/decorator.ts&quot;}},{&quot;char_start&quot;:&quot;2893&quot;,&quot;char_end&quot;:&quot;3639&quot;,&quot;blob_name&quot;:&quot;de1bf57e8bc3560117d27bc255d02d229c7a56c7a9b68a727da6cd2c0a535974&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;5311&quot;,&quot;char_end&quot;:&quot;6060&quot;,&quot;blob_name&quot;:&quot;de1bf57e8bc3560117d27bc255d02d229c7a56c7a9b68a727da6cd2c0a535974&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;README.md&quot;}},{&quot;char_start&quot;:&quot;3325&quot;,&quot;char_end&quot;:&quot;4104&quot;,&quot;blob_name&quot;:&quot;a38faa08178ae07490cef0099700ea13901fc97f4be91340e714e514fc10c1ce&quot;,&quot;file&quot;:{&quot;repoRoot&quot;:&quot;&quot;,&quot;pathName&quot;:&quot;src/context.ts&quot;}}]}],&quot;feedbackStates&quot;:{&quot;temp-fe-4167cbdb-7fe0-4b80-b143-55e806570b7d&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-6b7ee0c6-0d2c-4705-876b-fbd26182c807&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;draftActiveContextIds&quot;:[&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restate/src/context.ts&quot;,&quot;/Users/marcus-sa/Git/marcus-sa/deepkit-restatefalse&quot;,&quot;userGuidelines&quot;],&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;isAgentConversation&quot;:false,&quot;hasDirtyEdits&quot;:false,&quot;baselineTimestamp&quot;:0},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;8922afdf-3bc7-4c5a-ab93-2c50b69a79b0&quot;},&quot;__NEW_AGENT__&quot;:{&quot;id&quot;:&quot;__NEW_AGENT__&quot;,&quot;createdAtIso&quot;:&quot;2025-08-10T06:36:47.681Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-08-10T06:36:47.681Z&quot;,&quot;chatHistory&quot;:[],&quot;feedbackStates&quot;:{},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:false,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false,&quot;isAgentConversation&quot;:false,&quot;baselineTimestamp&quot;:0},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;2f31dc51-9d36-4f4c-a9a9-363eb953d54a&quot;}},&quot;agentExecutionMode&quot;:&quot;manual&quot;,&quot;isPanelCollapsed&quot;:true,&quot;displayedAnnouncements&quot;:[]}" />
      </map>
    </option>
  </component>
</project>